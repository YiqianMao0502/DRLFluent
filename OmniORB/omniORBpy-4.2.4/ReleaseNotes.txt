RELEASE NOTES
=============

This is omniORBpy 4.2.4.

See README.txt for building instructions.
See the documentation in the doc directory for more information.


Changes since omniORB 4.2.3
---------------------------

omniORB 4.2.4 is primarily a bug fix release. See update.log for full
details of changes. It mainly contains fixes for issues with Python 3.


Changes since omniORB 4.2.2
---------------------------

omniORB 4.2.3 is primarily a bug fix release. See update.log for full
details of changes. The main omniORBpy highlight is support for Python
3.7. For other new features, see the omniORB release notes.


Changes since omniORB 4.2.1
---------------------------

omniORB 4.2.2 is primarily a bug fix release. See update.log for full
details of changes. The main omniORBpy highlight is better support for
Python 3. For other new features, see the omniORB release notes.


Changes since omniORB 4.2.0
---------------------------

The big highlight of this release is full Python 3 support. Versions
from 3.2 onwards are supported.

Other changes are minor bug fixes. See update.log for full details.


Changes since omniORB 4.1.x / omniORBpy 3.x
-------------------------------------------

omniORBpy 4.2 has a number of new features and changes compared to
omniORB 4.1.x / omniORBpy 3.x. Here are the highlights:

 - The omniORBpy version number now matches the core omniORB version
   number.

 - Full Asynchronous Method Invocation (AMI) support.

 - Support for ZIOP, which compresses large messages.

 - Call timeouts are indicated with the CORBA.TIMEOUT exception,
   rather than CORBA.TRANSIENT (unless suppressed with the
   throwTransientOnTimeout configuration parameter).

 - Servers can be limited to a range of ports to listen on.

 - When CORBA.BAD_PARAM is raised due to parameter types that do not
   match the IDL definitions, detailed information about the cause is
   now reported.

 - IDL attributes can now be accessed as properties of object
   references. i.e. IDL attribute 'example' can be accessed as
   obj.example as well as with obj._get_example() and
   obj._set_example().

 - Ancient Python versions are no longer supported. omniidl and
   omniORBpy now only work with Python 2.5 or later.



Known limitations
-----------------

This release has the following known limitations:

 - Only Python 2.x is supported.

 - There is no support for DII and DSI. Since you can write IDL and
   Python code on-the-fly, this is not a significant limitation.

 - Interceptors have only limited functionality, and do not adhere to
   the portable interceptors API.

 - Local interfaces are not supported for user-defined IDL.
