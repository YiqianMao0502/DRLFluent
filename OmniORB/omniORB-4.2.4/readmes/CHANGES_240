Release 2.4.0
=============

Changes since 2.2.0:

IMPORTANT NOTE:
   The naming service now uses the prefix pragma "omg.org". This is
   introduced to bring our environment in line with the clarifications
   in the CORBA specification. Unfortunately, this results in on-the-wire
   incompatibility with clients that are linked with the old library, i.e.
   any programs linked before version 2.4.0 was released. Please read the
   section on omniNames below for details.

Bug fixes
---------
All bugs reported since 2.2.0 have been fixed.

Improved documentation 
----------------------
- a revised omniORB2 user's guide is provided.

Ported to other platforms
-------------------------
- thanks to our external contributors, omniORB2 has now been ported to the
  following platforms:

  o IBM AIX 4.2/ IBM C Set++ 3.1.4
  o HPUX 10.20/ aC++ (B3910 A.01.04)
  o OpenVMS Alpha 6.2/ DEC C++ compiler 5.5
  o OpenVMS Vax 6.1/ DEC C++ compiler 5.5
  o NextStep 3.3/ gcc-2.7.2

  This release has also been tested with egcc-1.0 that has been patched to 
  support thread-safe exception handling. See README.EGCS for details.

  The ports to Mac OS and SGI Irix 6.x are known to exist. However, the ports
  have not been merged into the source tree yet.

LifeCycle service support (New feature)
-------------------------

- Support for lifecycle service is now included (thanks to Duncan
  Grisby). The code in <top>/src/examples/lifecycle demonstrates how this is
  used.  The documentation <top>/doc/lifecycle.{ps,pdf} contains
  further details.

Host-based access control (New feature)
-------------------------

- A new hook is provided for plugging in access control policy modules to
  determine whether to accept new client connections.

  On unix platforms, an access control module based on Wietse Venema's
  tcp_wrapper_7.6 is implemented. Please refer to the omniORB2 user's guide
  for details.


Proper support for late binding (New feature)
-------------------------------

- Given interface A and B inherits from A and a process which only
  has the stub for interface A linked in. With 2.2.0, if the process
  expects a A but receives an object reference for a B, it would not
  know B is A. With 2.4.0, it will know by using the _is_a()
  operation to find out if B is indeed A. Please refer to the omniORB2 user's
  guide for details.


Improved support for Windows NT and Windows 95
----------------------------------------------

- The debug versions of all DLLs and static libraries are provided. The debug
  libraries are produced as part of the built process.

- Workarounds for the Microsoft VC++ nested class bugs are generated
  automatically by the stub compiler.

Improved BOA implementation (New feature)
---------------------------

- BOA can now be shutdown and restarted properly.

Better network connection management (New feature)
------------------------------------

- Cache connection shutdown doesn't cause a COMM_FAILURE.

- Connections are closed automatically after they are idle for a
  period of time. The idle period can be controlled by the
  application. This check is done both at the client and the server
  end. Please refer to the omniORB2 user's guide for details.

Improved Proxy Object support (New feature)
-----------------------------

 - omniORB specific extensions to allow applications to install
   per-object or global exception handlers to deal with
   CORBA::TRANSIENT, CORBA::COMM_FAILURE and CORBA::SystemException.

 - applications can control the creation of proxy objects or change the
   behaviour of proxy objects. This feature has been available in 2.2.0 but
   is now properly documented in the user's guide.
   
New version of omnithread
-------------------------

In response to overwhelming demand (:-)) there is a new version of the
omnithread library with several improvements.

  * Exceptions are now used everywhere.  Most functions which previously
    returned an error number now return void.  Nearly all such errors were
    unrecoverable and it was never really practical to test the return code
    anyway.  In the new interface functions throw a "fatal" exception when
    they get an underlying system error, or throw an "invalid" exception
    when invoked with invalid arguments.

  * The only such functions which do not return void are the condition
    variable timedwait and semaphore trywait.  As well as potentially
    throwing the above exceptions, these functions now return true on
    success, false on failure.  Because there is no change in function
    signature, the names of the functions have been changed by removing the
    underscore.  This causes existing code which uses them to fail to
    compile, thus ensuring that it be updated to the new interface.  The
    new names are also more similar to the equivalent posix functions.

  * There are new "lock" classes for acquiring mutexes and semaphores.
    These can be used to safely grab a lock until the end of a function,
    releasing it automatically even in the event of exceptions being
    thrown.

  * The implementation "wrapper" functions have been fixed so that they
    should now work properly on all compilers.

  * Some historical baggage has been removed.

Thanks are due to Brian Burton for suggesting most of these changes.


omniNames
---------

The naming service now uses the prefix pragma "omg.org" in its IDL. 

Unfortunately, this is not compatible on-the-wire with clients that are
linked with the old library, i.e. any programs linked before this version
is released.

The implications of this change are as follows:

a) omniNames built in this release *CANNOT* read the data file of the 
   version 2.2.0 omniNames. A new instance must be started from scratch. If 
   you start omniNames and tell it to use the old data file, it will certainly
   crash.

   Possible migration path:
     At ORL, we are running the old and the new omniNames in parallel.
     The new instance is setup to run on a different port. Also the
     new tree is built to read by default a different configuration file:
     (/project/omni/var/omniORB_NEW.cfg instead of 
     /project/omni/var/omniORB.cfg) so that a client will pick up the
     IOR of the old or the new omniNames depending on whether it is compiled
     with the old or the new library. When all our services have been
     recompiled, the old omniNames will be withdrawn.


b) If you want to continue to use the old omniNames, you can undo this
   change with the following steps:
     1. Edit <top>/src/lib/omniORB2/Naming.idl and remove the 
        #pragma prefix "omg.org" line.
     2. Do the same to <top>/idl/Naming.idl.
     3. Remove <top>/include/omniORB2/Naming.hh.
     4. Rebuild everything. You should do a gnumake/make veryclean at the
        top of <top>/src to make sure that the naming service stubs are
        regenerated.


