// This file is generated by omniidl (C++ backend) - omniORB_4_2. Do not edit.

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::TypeCode_ptr _0RL_tc_ZIOP_mPolicyType = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/ZIOP/PolicyType:1.0", "PolicyType", CORBA::TypeCode::PR_ulong_tc(), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace ZIOP { 
  const ::CORBA::TypeCode_ptr _tc_PolicyType = _0RL_tc_ZIOP_mPolicyType;
} 
#else
const ::CORBA::TypeCode_ptr ZIOP::_tc_PolicyType = _0RL_tc_ZIOP_mPolicyType;
#endif

static CORBA::TypeCode_ptr _0RL_tc_Compression_mCompressorId = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/Compression/CompressorId:1.0", "CompressorId", CORBA::TypeCode::PR_ushort_tc(), &_0RL_tcTrack);


static CORBA::TypeCode_ptr _0RL_tc_CORBA_mOctetSeq = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/CORBA/OctetSeq:1.0", "OctetSeq", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_octet_tc(), &_0RL_tcTrack), &_0RL_tcTrack);


static CORBA::TypeCode_ptr _0RL_tc_Compression_mBuffer = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/Compression/Buffer:1.0", "Buffer", _0RL_tc_CORBA_mOctetSeq, &_0RL_tcTrack);


static CORBA::PR_structMember _0RL_structmember_ZIOP_mCompressedData[] = {
  {"compressorid", _0RL_tc_Compression_mCompressorId},
  {"original_length", CORBA::TypeCode::PR_ulong_tc()},
  {"data", _0RL_tc_Compression_mBuffer}
};

#ifdef _0RL_tc_ZIOP_mCompressedData
#  undef _0RL_tc_ZIOP_mCompressedData
#endif
static CORBA::TypeCode_ptr _0RL_tc_ZIOP_mCompressedData = CORBA::TypeCode::PR_struct_tc("IDL:omg.org/ZIOP/CompressedData:1.0", "CompressedData", _0RL_structmember_ZIOP_mCompressedData, 3, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace ZIOP { 
  const ::CORBA::TypeCode_ptr _tc_CompressedData = _0RL_tc_ZIOP_mCompressedData;
} 
#else
const ::CORBA::TypeCode_ptr ZIOP::_tc_CompressedData = _0RL_tc_ZIOP_mCompressedData;
#endif


static CORBA::TypeCode_ptr _0RL_tc_ZIOP_mCompressionEnablingPolicyValue = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/ZIOP/CompressionEnablingPolicyValue:1.0", "CompressionEnablingPolicyValue", CORBA::TypeCode::PR_boolean_tc(), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace ZIOP { 
  const ::CORBA::TypeCode_ptr _tc_CompressionEnablingPolicyValue = _0RL_tc_ZIOP_mCompressionEnablingPolicyValue;
} 
#else
const ::CORBA::TypeCode_ptr ZIOP::_tc_CompressionEnablingPolicyValue = _0RL_tc_ZIOP_mCompressionEnablingPolicyValue;
#endif

static CORBA::TypeCode_ptr _0RL_tc_Compression_mCompressionLevel = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/Compression/CompressionLevel:1.0", "CompressionLevel", CORBA::TypeCode::PR_ushort_tc(), &_0RL_tcTrack);


static CORBA::PR_structMember _0RL_structmember_Compression_mCompressorIdLevel[] = {
  {"compressor_id", _0RL_tc_Compression_mCompressorId},
  {"compression_level", _0RL_tc_Compression_mCompressionLevel}
};

#ifdef _0RL_tc_Compression_mCompressorIdLevel
#  undef _0RL_tc_Compression_mCompressorIdLevel
#endif
static CORBA::TypeCode_ptr _0RL_tc_Compression_mCompressorIdLevel = CORBA::TypeCode::PR_struct_tc("IDL:omg.org/Compression/CompressorIdLevel:1.0", "CompressorIdLevel", _0RL_structmember_Compression_mCompressorIdLevel, 2, &_0RL_tcTrack);


static CORBA::TypeCode_ptr _0RL_tc_Compression_mCompressorIdLevelList = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/Compression/CompressorIdLevelList:1.0", "CompressorIdLevelList", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_Compression_mCompressorIdLevel, &_0RL_tcTrack), &_0RL_tcTrack);




static CORBA::TypeCode_ptr _0RL_tc_ZIOP_mCompressionIdLevelListPolicyValue = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/ZIOP/CompressionIdLevelListPolicyValue:1.0", "CompressionIdLevelListPolicyValue", _0RL_tc_Compression_mCompressorIdLevelList, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace ZIOP { 
  const ::CORBA::TypeCode_ptr _tc_CompressionIdLevelListPolicyValue = _0RL_tc_ZIOP_mCompressionIdLevelListPolicyValue;
} 
#else
const ::CORBA::TypeCode_ptr ZIOP::_tc_CompressionIdLevelListPolicyValue = _0RL_tc_ZIOP_mCompressionIdLevelListPolicyValue;
#endif

static CORBA::TypeCode_ptr _0RL_tc_ZIOP_mCompressionLowValuePolicyValue = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/ZIOP/CompressionLowValuePolicyValue:1.0", "CompressionLowValuePolicyValue", CORBA::TypeCode::PR_ulong_tc(), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace ZIOP { 
  const ::CORBA::TypeCode_ptr _tc_CompressionLowValuePolicyValue = _0RL_tc_ZIOP_mCompressionLowValuePolicyValue;
} 
#else
const ::CORBA::TypeCode_ptr ZIOP::_tc_CompressionLowValuePolicyValue = _0RL_tc_ZIOP_mCompressionLowValuePolicyValue;
#endif

static CORBA::TypeCode_ptr _0RL_tc_Compression_mCompressionRatio = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/Compression/CompressionRatio:1.0", "CompressionRatio", CORBA::TypeCode::PR_float_tc(), &_0RL_tcTrack);


static CORBA::TypeCode_ptr _0RL_tc_ZIOP_mCompressionMinRatioPolicyValue = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/ZIOP/CompressionMinRatioPolicyValue:1.0", "CompressionMinRatioPolicyValue", _0RL_tc_Compression_mCompressionRatio, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace ZIOP { 
  const ::CORBA::TypeCode_ptr _tc_CompressionMinRatioPolicyValue = _0RL_tc_ZIOP_mCompressionMinRatioPolicyValue;
} 
#else
const ::CORBA::TypeCode_ptr ZIOP::_tc_CompressionMinRatioPolicyValue = _0RL_tc_ZIOP_mCompressionMinRatioPolicyValue;
#endif

static void _0RL_ZIOP_mCompressedData_marshal_fn(cdrStream& _s, void* _v)
{
  ZIOP::CompressedData* _p = (ZIOP::CompressedData*)_v;
  *_p >>= _s;
}
static void _0RL_ZIOP_mCompressedData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  ZIOP::CompressedData* _p = new ZIOP::CompressedData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_ZIOP_mCompressedData_destructor_fn(void* _v)
{
  ZIOP::CompressedData* _p = (ZIOP::CompressedData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const ZIOP::CompressedData& _s)
{
  ZIOP::CompressedData* _p = new ZIOP::CompressedData(_s);
  _a.PR_insert(_0RL_tc_ZIOP_mCompressedData,
               _0RL_ZIOP_mCompressedData_marshal_fn,
               _0RL_ZIOP_mCompressedData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, ZIOP::CompressedData* _sp)
{
  _a.PR_insert(_0RL_tc_ZIOP_mCompressedData,
               _0RL_ZIOP_mCompressedData_marshal_fn,
               _0RL_ZIOP_mCompressedData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, ZIOP::CompressedData*& _sp)
{
  return _a >>= (const ZIOP::CompressedData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const ZIOP::CompressedData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_ZIOP_mCompressedData,
                    _0RL_ZIOP_mCompressedData_unmarshal_fn,
                    _0RL_ZIOP_mCompressedData_marshal_fn,
                    _0RL_ZIOP_mCompressedData_destructor_fn,
                    _v)) {
    _sp = (const ZIOP::CompressedData*)_v;
    return 1;
  }
  return 0;
}

