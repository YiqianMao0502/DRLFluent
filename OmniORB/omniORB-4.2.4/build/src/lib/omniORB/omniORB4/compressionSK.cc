// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.

#include "compression.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_2;



::CORBA::Exception::insertExceptionToAny Compression::CompressionException::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP Compression::CompressionException::insertToAnyFnNCP = 0;

Compression::CompressionException::CompressionException(const Compression::CompressionException& _s) : ::CORBA::UserException(_s)
{
  reason = _s.reason;
  description = _s.description;

}

Compression::CompressionException::CompressionException(::CORBA::Long _reason, const char* _description)
{
  pd_insertToAnyFn    = Compression::CompressionException::insertToAnyFn;
  pd_insertToAnyFnNCP = Compression::CompressionException::insertToAnyFnNCP;
  reason = _reason;
  description = _description;

}



Compression::CompressionException& Compression::CompressionException::operator=(const Compression::CompressionException& _s)
{
  if (&_s != this) {
    ((::CORBA::UserException*) this)->operator=(_s);
    reason = _s.reason;
    description = _s.description;

  }
  return *this;
}

Compression::CompressionException::~CompressionException() {}

void Compression::CompressionException::_raise() const { throw *this; }

const char* Compression::CompressionException::_PD_repoId = "IDL:omg.org/Compression/CompressionException:1.0";
const char* Compression::CompressionException::_PD_typeId = "Exception/UserException/Compression::CompressionException";

Compression::CompressionException* Compression::CompressionException::_downcast(::CORBA::Exception* _e) {
  return (CompressionException*) _NP_is_a(_e, _PD_typeId);
}

const Compression::CompressionException* Compression::CompressionException::_downcast(const ::CORBA::Exception* _e) {
  return (const CompressionException*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* Compression::CompressionException::_NP_duplicate() const {
  return new CompressionException(*this);
}

const char* Compression::CompressionException::_NP_typeId() const {
  return _PD_typeId;
}

const char* Compression::CompressionException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:omg.org/Compression/CompressionException:1.0");
  return _PD_repoId;
}
 
void Compression::CompressionException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
Compression::CompressionException::operator>>= (cdrStream& _n) const
{
  reason >>= _n;
  _n.marshalString(description,0);

}

void
Compression::CompressionException::operator<<= (cdrStream& _n)
{
  (::CORBA::Long&)reason <<= _n;
  description = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny Compression::FactoryAlreadyRegistered::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP Compression::FactoryAlreadyRegistered::insertToAnyFnNCP = 0;

Compression::FactoryAlreadyRegistered::FactoryAlreadyRegistered(const Compression::FactoryAlreadyRegistered& _s) : ::CORBA::UserException(_s)
{
  
}



Compression::FactoryAlreadyRegistered& Compression::FactoryAlreadyRegistered::operator=(const Compression::FactoryAlreadyRegistered& _s)
{
  if (&_s != this) {
    ((::CORBA::UserException*) this)->operator=(_s);
    
  }
  return *this;
}

Compression::FactoryAlreadyRegistered::~FactoryAlreadyRegistered() {}

void Compression::FactoryAlreadyRegistered::_raise() const { throw *this; }

const char* Compression::FactoryAlreadyRegistered::_PD_repoId = "IDL:omg.org/Compression/FactoryAlreadyRegistered:1.0";
const char* Compression::FactoryAlreadyRegistered::_PD_typeId = "Exception/UserException/Compression::FactoryAlreadyRegistered";

Compression::FactoryAlreadyRegistered* Compression::FactoryAlreadyRegistered::_downcast(::CORBA::Exception* _e) {
  return (FactoryAlreadyRegistered*) _NP_is_a(_e, _PD_typeId);
}

const Compression::FactoryAlreadyRegistered* Compression::FactoryAlreadyRegistered::_downcast(const ::CORBA::Exception* _e) {
  return (const FactoryAlreadyRegistered*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* Compression::FactoryAlreadyRegistered::_NP_duplicate() const {
  return new FactoryAlreadyRegistered(*this);
}

const char* Compression::FactoryAlreadyRegistered::_NP_typeId() const {
  return _PD_typeId;
}

const char* Compression::FactoryAlreadyRegistered::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:omg.org/Compression/FactoryAlreadyRegistered:1.0");
  return _PD_repoId;
}
 
void Compression::FactoryAlreadyRegistered::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny Compression::UnknownCompressorId::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP Compression::UnknownCompressorId::insertToAnyFnNCP = 0;

Compression::UnknownCompressorId::UnknownCompressorId(const Compression::UnknownCompressorId& _s) : ::CORBA::UserException(_s)
{
  
}



Compression::UnknownCompressorId& Compression::UnknownCompressorId::operator=(const Compression::UnknownCompressorId& _s)
{
  if (&_s != this) {
    ((::CORBA::UserException*) this)->operator=(_s);
    
  }
  return *this;
}

Compression::UnknownCompressorId::~UnknownCompressorId() {}

void Compression::UnknownCompressorId::_raise() const { throw *this; }

const char* Compression::UnknownCompressorId::_PD_repoId = "IDL:omg.org/Compression/UnknownCompressorId:1.0";
const char* Compression::UnknownCompressorId::_PD_typeId = "Exception/UserException/Compression::UnknownCompressorId";

Compression::UnknownCompressorId* Compression::UnknownCompressorId::_downcast(::CORBA::Exception* _e) {
  return (UnknownCompressorId*) _NP_is_a(_e, _PD_typeId);
}

const Compression::UnknownCompressorId* Compression::UnknownCompressorId::_downcast(const ::CORBA::Exception* _e) {
  return (const UnknownCompressorId*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* Compression::UnknownCompressorId::_NP_duplicate() const {
  return new UnknownCompressorId(*this);
}

const char* Compression::UnknownCompressorId::_NP_typeId() const {
  return _PD_typeId;
}

const char* Compression::UnknownCompressorId::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:omg.org/Compression/UnknownCompressorId:1.0");
  return _PD_repoId;
}
 
void Compression::UnknownCompressorId::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

_init_in_def_( const ::CORBA::UShort Compression::COMPRESSORID_NONE = 0; )

_init_in_def_( const ::CORBA::UShort Compression::COMPRESSORID_GZIP = 1; )

_init_in_def_( const ::CORBA::UShort Compression::COMPRESSORID_PKZIP = 2; )

_init_in_def_( const ::CORBA::UShort Compression::COMPRESSORID_BZIP2 = 3; )

_init_in_def_( const ::CORBA::UShort Compression::COMPRESSORID_ZLIB = 4; )

_init_in_def_( const ::CORBA::UShort Compression::COMPRESSORID_LZMA = 5; )

_init_in_def_( const ::CORBA::UShort Compression::COMPRESSORID_LZO = 6; )

_init_in_def_( const ::CORBA::UShort Compression::COMPRESSORID_RZIP = 7; )

_init_in_def_( const ::CORBA::UShort Compression::COMPRESSORID_7X = 8; )

_init_in_def_( const ::CORBA::UShort Compression::COMPRESSORID_XAR = 9; )

void
Compression::CompressorIdLevel::operator>>= (cdrStream &_n) const
{
  compressor_id >>= _n;
  compression_level >>= _n;

}

void
Compression::CompressorIdLevel::operator<<= (cdrStream &_n)
{
  (CompressorId&)compressor_id <<= _n;
  (CompressionLevel&)compression_level <<= _n;

}

Compression::Compressor_ptr Compression::Compressor_Helper::_nil() {
  return ::Compression::Compressor::_nil();
}

::CORBA::Boolean Compression::Compressor_Helper::is_nil(::Compression::Compressor_ptr p) {
  return ::CORBA::is_nil(p);

}

void Compression::Compressor_Helper::release(::Compression::Compressor_ptr p) {
  ::CORBA::release(p);
}

void Compression::Compressor_Helper::marshalObjRef(::Compression::Compressor_ptr obj, cdrStream& s) {
  ::Compression::Compressor::_marshalObjRef(obj, s);
}

Compression::Compressor_ptr Compression::Compressor_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Compression::Compressor::_unmarshalObjRef(s);
}

void Compression::Compressor_Helper::duplicate(::Compression::Compressor_ptr obj) {
  if (obj && !obj->_NP_is_nil())  obj->_NP_incrRefCount();
}

Compression::Compressor_ptr
Compression::Compressor::_duplicate(::Compression::Compressor_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  obj->_NP_incrRefCount();
  return obj;
}

Compression::Compressor_ptr
Compression::Compressor::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil()) return _nil();
  _ptr_type e = (_ptr_type) obj->_ptrToObjRef(_PD_repoId);
  if (e) {
    e->_NP_incrRefCount();
    return e;
  }
  return _nil();
}

Compression::Compressor_ptr
Compression::Compressor::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  return _narrow(obj);
}

Compression::Compressor_ptr
Compression::Compressor::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _nil_Compressor _the_nil_obj;
  return &_the_nil_obj;
#else
  static _nil_Compressor* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _nil_Compressor;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Compression::Compressor::_PD_repoId = "IDL:omg.org/Compression/Compressor:1.0";


Compression::Compressor::Compressor()
{
  _PR_setobj((omniObjRef*)1);
}

Compression::Compressor::~Compressor() { }

Compression::_nil_Compressor::~_nil_Compressor() { }

void*
Compression::Compressor::_ptrToObjRef(const char* id)
{
  if (id == ::Compression::Compressor::_PD_repoId)
    return (::Compression::Compressor_ptr) this;
  if (id == ::CORBA::LocalObject::_PD_repoId)
    return (::CORBA::LocalObject_ptr) this;


  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::Compression::Compressor::_PD_repoId))
    return (::Compression::Compressor_ptr) this;
  if (omni::strMatch(id, ::CORBA::LocalObject::_PD_repoId))
    return (::CORBA::LocalObject_ptr) this;


  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}

void Compression::_nil_Compressor::compress(const ::Compression::Buffer& source, ::Compression::Buffer& target)
{
  OMNIORB_THROW(INV_OBJREF, INV_OBJREF_InvokeOnNilObjRef, ::CORBA::COMPLETED_NO);

}



void Compression::_nil_Compressor::decompress(const ::Compression::Buffer& source, ::Compression::Buffer& target)
{
  OMNIORB_THROW(INV_OBJREF, INV_OBJREF_InvokeOnNilObjRef, ::CORBA::COMPLETED_NO);

}



Compression::CompressorFactory_ptr Compression::_nil_Compressor::compressor_factory()
{
  OMNIORB_THROW(INV_OBJREF, INV_OBJREF_InvokeOnNilObjRef, ::CORBA::COMPLETED_NO);

#ifdef NEED_DUMMY_RETURN
  // Pretend recursive call to silence warnings about no return value
  return compressor_factory();
#endif

}



Compression::CompressionLevel Compression::_nil_Compressor::compression_level()
{
  OMNIORB_THROW(INV_OBJREF, INV_OBJREF_InvokeOnNilObjRef, ::CORBA::COMPLETED_NO);

#ifdef NEED_DUMMY_RETURN
  // Pretend recursive call to silence warnings about no return value
  return compression_level();
#endif

}



::CORBA::ULongLong Compression::_nil_Compressor::compressed_bytes()
{
  OMNIORB_THROW(INV_OBJREF, INV_OBJREF_InvokeOnNilObjRef, ::CORBA::COMPLETED_NO);

#ifdef NEED_DUMMY_RETURN
  // Pretend recursive call to silence warnings about no return value
  return compressed_bytes();
#endif

}



::CORBA::ULongLong Compression::_nil_Compressor::uncompressed_bytes()
{
  OMNIORB_THROW(INV_OBJREF, INV_OBJREF_InvokeOnNilObjRef, ::CORBA::COMPLETED_NO);

#ifdef NEED_DUMMY_RETURN
  // Pretend recursive call to silence warnings about no return value
  return uncompressed_bytes();
#endif

}



Compression::CompressionRatio Compression::_nil_Compressor::compression_ratio()
{
  OMNIORB_THROW(INV_OBJREF, INV_OBJREF_InvokeOnNilObjRef, ::CORBA::COMPLETED_NO);

#ifdef NEED_DUMMY_RETURN
  // Pretend recursive call to silence warnings about no return value
  return compression_ratio();
#endif

}



Compression::CompressorFactory_ptr Compression::CompressorFactory_Helper::_nil() {
  return ::Compression::CompressorFactory::_nil();
}

::CORBA::Boolean Compression::CompressorFactory_Helper::is_nil(::Compression::CompressorFactory_ptr p) {
  return ::CORBA::is_nil(p);

}

void Compression::CompressorFactory_Helper::release(::Compression::CompressorFactory_ptr p) {
  ::CORBA::release(p);
}

void Compression::CompressorFactory_Helper::marshalObjRef(::Compression::CompressorFactory_ptr obj, cdrStream& s) {
  ::Compression::CompressorFactory::_marshalObjRef(obj, s);
}

Compression::CompressorFactory_ptr Compression::CompressorFactory_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Compression::CompressorFactory::_unmarshalObjRef(s);
}

void Compression::CompressorFactory_Helper::duplicate(::Compression::CompressorFactory_ptr obj) {
  if (obj && !obj->_NP_is_nil())  obj->_NP_incrRefCount();
}

Compression::CompressorFactory_ptr
Compression::CompressorFactory::_duplicate(::Compression::CompressorFactory_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  obj->_NP_incrRefCount();
  return obj;
}

Compression::CompressorFactory_ptr
Compression::CompressorFactory::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil()) return _nil();
  _ptr_type e = (_ptr_type) obj->_ptrToObjRef(_PD_repoId);
  if (e) {
    e->_NP_incrRefCount();
    return e;
  }
  return _nil();
}

Compression::CompressorFactory_ptr
Compression::CompressorFactory::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  return _narrow(obj);
}

Compression::CompressorFactory_ptr
Compression::CompressorFactory::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _nil_CompressorFactory _the_nil_obj;
  return &_the_nil_obj;
#else
  static _nil_CompressorFactory* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _nil_CompressorFactory;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Compression::CompressorFactory::_PD_repoId = "IDL:omg.org/Compression/CompressorFactory:1.0";


Compression::CompressorFactory::CompressorFactory()
{
  _PR_setobj((omniObjRef*)1);
}

Compression::CompressorFactory::~CompressorFactory() { }

Compression::_nil_CompressorFactory::~_nil_CompressorFactory() { }

void*
Compression::CompressorFactory::_ptrToObjRef(const char* id)
{
  if (id == ::Compression::CompressorFactory::_PD_repoId)
    return (::Compression::CompressorFactory_ptr) this;
  if (id == ::CORBA::LocalObject::_PD_repoId)
    return (::CORBA::LocalObject_ptr) this;


  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::Compression::CompressorFactory::_PD_repoId))
    return (::Compression::CompressorFactory_ptr) this;
  if (omni::strMatch(id, ::CORBA::LocalObject::_PD_repoId))
    return (::CORBA::LocalObject_ptr) this;


  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}

Compression::CompressorId Compression::_nil_CompressorFactory::compressor_id()
{
  OMNIORB_THROW(INV_OBJREF, INV_OBJREF_InvokeOnNilObjRef, ::CORBA::COMPLETED_NO);

#ifdef NEED_DUMMY_RETURN
  // Pretend recursive call to silence warnings about no return value
  return compressor_id();
#endif

}



Compression::Compressor_ptr Compression::_nil_CompressorFactory::get_compressor(::Compression::CompressionLevel compression_level)
{
  OMNIORB_THROW(INV_OBJREF, INV_OBJREF_InvokeOnNilObjRef, ::CORBA::COMPLETED_NO);

#ifdef NEED_DUMMY_RETURN
  // Pretend recursive call to silence warnings about no return value
  return get_compressor(compression_level);
#endif

}



Compression::CompressionManager_ptr Compression::CompressionManager_Helper::_nil() {
  return ::Compression::CompressionManager::_nil();
}

::CORBA::Boolean Compression::CompressionManager_Helper::is_nil(::Compression::CompressionManager_ptr p) {
  return ::CORBA::is_nil(p);

}

void Compression::CompressionManager_Helper::release(::Compression::CompressionManager_ptr p) {
  ::CORBA::release(p);
}

void Compression::CompressionManager_Helper::marshalObjRef(::Compression::CompressionManager_ptr obj, cdrStream& s) {
  ::Compression::CompressionManager::_marshalObjRef(obj, s);
}

Compression::CompressionManager_ptr Compression::CompressionManager_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Compression::CompressionManager::_unmarshalObjRef(s);
}

void Compression::CompressionManager_Helper::duplicate(::Compression::CompressionManager_ptr obj) {
  if (obj && !obj->_NP_is_nil())  obj->_NP_incrRefCount();
}

Compression::CompressionManager_ptr
Compression::CompressionManager::_duplicate(::Compression::CompressionManager_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  obj->_NP_incrRefCount();
  return obj;
}

Compression::CompressionManager_ptr
Compression::CompressionManager::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil()) return _nil();
  _ptr_type e = (_ptr_type) obj->_ptrToObjRef(_PD_repoId);
  if (e) {
    e->_NP_incrRefCount();
    return e;
  }
  return _nil();
}

Compression::CompressionManager_ptr
Compression::CompressionManager::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  return _narrow(obj);
}

Compression::CompressionManager_ptr
Compression::CompressionManager::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _nil_CompressionManager _the_nil_obj;
  return &_the_nil_obj;
#else
  static _nil_CompressionManager* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _nil_CompressionManager;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Compression::CompressionManager::_PD_repoId = "IDL:omg.org/Compression/CompressionManager:1.0";


Compression::CompressionManager::CompressionManager()
{
  _PR_setobj((omniObjRef*)1);
}

Compression::CompressionManager::~CompressionManager() { }

Compression::_nil_CompressionManager::~_nil_CompressionManager() { }

void*
Compression::CompressionManager::_ptrToObjRef(const char* id)
{
  if (id == ::Compression::CompressionManager::_PD_repoId)
    return (::Compression::CompressionManager_ptr) this;
  if (id == ::CORBA::LocalObject::_PD_repoId)
    return (::CORBA::LocalObject_ptr) this;


  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::Compression::CompressionManager::_PD_repoId))
    return (::Compression::CompressionManager_ptr) this;
  if (omni::strMatch(id, ::CORBA::LocalObject::_PD_repoId))
    return (::CORBA::LocalObject_ptr) this;


  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}

void Compression::_nil_CompressionManager::register_factory(::Compression::CompressorFactory_ptr compressor_factory)
{
  OMNIORB_THROW(INV_OBJREF, INV_OBJREF_InvokeOnNilObjRef, ::CORBA::COMPLETED_NO);

}



void Compression::_nil_CompressionManager::unregister_factory(::Compression::CompressorId compressor_id)
{
  OMNIORB_THROW(INV_OBJREF, INV_OBJREF_InvokeOnNilObjRef, ::CORBA::COMPLETED_NO);

}



Compression::CompressorFactory_ptr Compression::_nil_CompressionManager::get_factory(::Compression::CompressorId compressor_id)
{
  OMNIORB_THROW(INV_OBJREF, INV_OBJREF_InvokeOnNilObjRef, ::CORBA::COMPLETED_NO);

#ifdef NEED_DUMMY_RETURN
  // Pretend recursive call to silence warnings about no return value
  return get_factory(compressor_id);
#endif

}



Compression::Compressor_ptr Compression::_nil_CompressionManager::get_compressor(::Compression::CompressorId compressor_id, ::Compression::CompressionLevel compression_level)
{
  OMNIORB_THROW(INV_OBJREF, INV_OBJREF_InvokeOnNilObjRef, ::CORBA::COMPLETED_NO);

#ifdef NEED_DUMMY_RETURN
  // Pretend recursive call to silence warnings about no return value
  return get_compressor(compressor_id, compression_level);
#endif

}



Compression::CompressorFactorySeq* Compression::_nil_CompressionManager::get_factories()
{
  OMNIORB_THROW(INV_OBJREF, INV_OBJREF_InvokeOnNilObjRef, ::CORBA::COMPLETED_NO);

#ifdef NEED_DUMMY_RETURN
  // Pretend recursive call to silence warnings about no return value
  return get_factories();
#endif

}



