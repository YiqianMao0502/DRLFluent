// This file is generated by omniidl (C++ backend) - omniORB_4_2. Do not edit.

#include "CosNotifyChannelAdmin.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_2_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);


static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mConnectionAlreadyActive = CORBA::TypeCode::PR_exception_tc("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0", "ConnectionAlreadyActive", (CORBA::PR_structMember*) 0, 0, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ConnectionAlreadyActive = _0RL_tc_CosNotifyChannelAdmin_mConnectionAlreadyActive;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ConnectionAlreadyActive = _0RL_tc_CosNotifyChannelAdmin_mConnectionAlreadyActive;
#endif



static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mConnectionAlreadyInactive = CORBA::TypeCode::PR_exception_tc("IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0", "ConnectionAlreadyInactive", (CORBA::PR_structMember*) 0, 0, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ConnectionAlreadyInactive = _0RL_tc_CosNotifyChannelAdmin_mConnectionAlreadyInactive;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ConnectionAlreadyInactive = _0RL_tc_CosNotifyChannelAdmin_mConnectionAlreadyInactive;
#endif



static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mNotConnected = CORBA::TypeCode::PR_exception_tc("IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0", "NotConnected", (CORBA::PR_structMember*) 0, 0, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_NotConnected = _0RL_tc_CosNotifyChannelAdmin_mNotConnected;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_NotConnected = _0RL_tc_CosNotifyChannelAdmin_mNotConnected;
#endif


static const char* _0RL_enumMember_CosNotifyChannelAdmin_mProxyType[] = { "PUSH_ANY", "PULL_ANY", "PUSH_STRUCTURED", "PULL_STRUCTURED", "PUSH_SEQUENCE", "PULL_SEQUENCE", "PUSH_TYPED", "PULL_TYPED" };
static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mProxyType = CORBA::TypeCode::PR_enum_tc("IDL:omg.org/CosNotifyChannelAdmin/ProxyType:1.0", "ProxyType", _0RL_enumMember_CosNotifyChannelAdmin_mProxyType, 8, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ProxyType = _0RL_tc_CosNotifyChannelAdmin_mProxyType;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ProxyType = _0RL_tc_CosNotifyChannelAdmin_mProxyType;
#endif

static const char* _0RL_enumMember_CosNotifyChannelAdmin_mObtainInfoMode[] = { "ALL_NOW_UPDATES_OFF", "ALL_NOW_UPDATES_ON", "NONE_NOW_UPDATES_OFF", "NONE_NOW_UPDATES_ON" };
static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mObtainInfoMode = CORBA::TypeCode::PR_enum_tc("IDL:omg.org/CosNotifyChannelAdmin/ObtainInfoMode:1.0", "ObtainInfoMode", _0RL_enumMember_CosNotifyChannelAdmin_mObtainInfoMode, 4, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ObtainInfoMode = _0RL_tc_CosNotifyChannelAdmin_mObtainInfoMode;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ObtainInfoMode = _0RL_tc_CosNotifyChannelAdmin_mObtainInfoMode;
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ProxyConsumer = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0", "ProxyConsumer", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ProxyConsumer = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0", "ProxyConsumer", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ProxySupplier = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0", "ProxySupplier", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ProxySupplier = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0", "ProxySupplier", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ProxyPushConsumer = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/ProxyPushConsumer:1.0", "ProxyPushConsumer", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ProxyPushConsumer = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/ProxyPushConsumer:1.0", "ProxyPushConsumer", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_StructuredProxyPushConsumer = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushConsumer:1.0", "StructuredProxyPushConsumer", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_StructuredProxyPushConsumer = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushConsumer:1.0", "StructuredProxyPushConsumer", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_SequenceProxyPushConsumer = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushConsumer:1.0", "SequenceProxyPushConsumer", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_SequenceProxyPushConsumer = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushConsumer:1.0", "SequenceProxyPushConsumer", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ProxyPullSupplier = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/ProxyPullSupplier:1.0", "ProxyPullSupplier", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ProxyPullSupplier = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/ProxyPullSupplier:1.0", "ProxyPullSupplier", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_StructuredProxyPullSupplier = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullSupplier:1.0", "StructuredProxyPullSupplier", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_StructuredProxyPullSupplier = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullSupplier:1.0", "StructuredProxyPullSupplier", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_SequenceProxyPullSupplier = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullSupplier:1.0", "SequenceProxyPullSupplier", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_SequenceProxyPullSupplier = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullSupplier:1.0", "SequenceProxyPullSupplier", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ProxyPullConsumer = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/ProxyPullConsumer:1.0", "ProxyPullConsumer", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ProxyPullConsumer = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/ProxyPullConsumer:1.0", "ProxyPullConsumer", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_StructuredProxyPullConsumer = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullConsumer:1.0", "StructuredProxyPullConsumer", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_StructuredProxyPullConsumer = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPullConsumer:1.0", "StructuredProxyPullConsumer", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_SequenceProxyPullConsumer = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullConsumer:1.0", "SequenceProxyPullConsumer", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_SequenceProxyPullConsumer = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPullConsumer:1.0", "SequenceProxyPullConsumer", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ProxyPushSupplier = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier:1.0", "ProxyPushSupplier", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ProxyPushSupplier = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier:1.0", "ProxyPushSupplier", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_StructuredProxyPushSupplier = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier:1.0", "StructuredProxyPushSupplier", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_StructuredProxyPushSupplier = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier:1.0", "StructuredProxyPushSupplier", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_SequenceProxyPushSupplier = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier:1.0", "SequenceProxyPushSupplier", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_SequenceProxyPushSupplier = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier:1.0", "SequenceProxyPushSupplier", &_0RL_tcTrack);
#endif

static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mProxyID = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/CosNotifyChannelAdmin/ProxyID:1.0", "ProxyID", CORBA::TypeCode::PR_long_tc(), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ProxyID = _0RL_tc_CosNotifyChannelAdmin_mProxyID;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ProxyID = _0RL_tc_CosNotifyChannelAdmin_mProxyID;
#endif

static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mProxyIDSeq = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/CosNotifyChannelAdmin/ProxyIDSeq:1.0", "ProxyIDSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_CosNotifyChannelAdmin_mProxyID, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ProxyIDSeq = _0RL_tc_CosNotifyChannelAdmin_mProxyIDSeq;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ProxyIDSeq = _0RL_tc_CosNotifyChannelAdmin_mProxyIDSeq;
#endif

static const char* _0RL_enumMember_CosNotifyChannelAdmin_mClientType[] = { "ANY_EVENT", "STRUCTURED_EVENT", "SEQUENCE_EVENT" };
static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mClientType = CORBA::TypeCode::PR_enum_tc("IDL:omg.org/CosNotifyChannelAdmin/ClientType:1.0", "ClientType", _0RL_enumMember_CosNotifyChannelAdmin_mClientType, 3, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ClientType = _0RL_tc_CosNotifyChannelAdmin_mClientType;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ClientType = _0RL_tc_CosNotifyChannelAdmin_mClientType;
#endif

static const char* _0RL_enumMember_CosNotifyChannelAdmin_mInterFilterGroupOperator[] = { "AND_OP", "OR_OP" };
static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mInterFilterGroupOperator = CORBA::TypeCode::PR_enum_tc("IDL:omg.org/CosNotifyChannelAdmin/InterFilterGroupOperator:1.0", "InterFilterGroupOperator", _0RL_enumMember_CosNotifyChannelAdmin_mInterFilterGroupOperator, 2, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_InterFilterGroupOperator = _0RL_tc_CosNotifyChannelAdmin_mInterFilterGroupOperator;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_InterFilterGroupOperator = _0RL_tc_CosNotifyChannelAdmin_mInterFilterGroupOperator;
#endif

static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mAdminID = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/CosNotifyChannelAdmin/AdminID:1.0", "AdminID", CORBA::TypeCode::PR_long_tc(), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_AdminID = _0RL_tc_CosNotifyChannelAdmin_mAdminID;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_AdminID = _0RL_tc_CosNotifyChannelAdmin_mAdminID;
#endif

static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mAdminIDSeq = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/CosNotifyChannelAdmin/AdminIDSeq:1.0", "AdminIDSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_CosNotifyChannelAdmin_mAdminID, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_AdminIDSeq = _0RL_tc_CosNotifyChannelAdmin_mAdminIDSeq;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_AdminIDSeq = _0RL_tc_CosNotifyChannelAdmin_mAdminIDSeq;
#endif


static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mAdminNotFound = CORBA::TypeCode::PR_exception_tc("IDL:omg.org/CosNotifyChannelAdmin/AdminNotFound:1.0", "AdminNotFound", (CORBA::PR_structMember*) 0, 0, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_AdminNotFound = _0RL_tc_CosNotifyChannelAdmin_mAdminNotFound;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_AdminNotFound = _0RL_tc_CosNotifyChannelAdmin_mAdminNotFound;
#endif



static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mProxyNotFound = CORBA::TypeCode::PR_exception_tc("IDL:omg.org/CosNotifyChannelAdmin/ProxyNotFound:1.0", "ProxyNotFound", (CORBA::PR_structMember*) 0, 0, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ProxyNotFound = _0RL_tc_CosNotifyChannelAdmin_mProxyNotFound;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ProxyNotFound = _0RL_tc_CosNotifyChannelAdmin_mProxyNotFound;
#endif


static CORBA::TypeCode_ptr _0RL_tc_CosNotification_mIstring = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/CosNotification/Istring:1.0", "Istring", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack), &_0RL_tcTrack);


static CORBA::TypeCode_ptr _0RL_tc_CosNotification_mPropertyName = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/CosNotification/PropertyName:1.0", "PropertyName", _0RL_tc_CosNotification_mIstring, &_0RL_tcTrack);


static CORBA::TypeCode_ptr _0RL_tc_CosNotification_mPropertyValue = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/CosNotification/PropertyValue:1.0", "PropertyValue", CORBA::TypeCode::PR_any_tc(), &_0RL_tcTrack);


static CORBA::PR_structMember _0RL_structmember_CosNotifyChannelAdmin_mAdminLimit[] = {
  {"name", _0RL_tc_CosNotification_mPropertyName},
  {"value", _0RL_tc_CosNotification_mPropertyValue}
};

#ifdef _0RL_tc_CosNotifyChannelAdmin_mAdminLimit
#  undef _0RL_tc_CosNotifyChannelAdmin_mAdminLimit
#endif
static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mAdminLimit = CORBA::TypeCode::PR_struct_tc("IDL:omg.org/CosNotifyChannelAdmin/AdminLimit:1.0", "AdminLimit", _0RL_structmember_CosNotifyChannelAdmin_mAdminLimit, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_AdminLimit = _0RL_tc_CosNotifyChannelAdmin_mAdminLimit;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_AdminLimit = _0RL_tc_CosNotifyChannelAdmin_mAdminLimit;
#endif



static CORBA::PR_structMember _0RL_structmember_CosNotifyChannelAdmin_mAdminLimitExceeded[] = {
  {"admin_property_err", _0RL_tc_CosNotifyChannelAdmin_mAdminLimit}
};

static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mAdminLimitExceeded = CORBA::TypeCode::PR_exception_tc("IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0", "AdminLimitExceeded", _0RL_structmember_CosNotifyChannelAdmin_mAdminLimitExceeded, 1, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_AdminLimitExceeded = _0RL_tc_CosNotifyChannelAdmin_mAdminLimitExceeded;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_AdminLimitExceeded = _0RL_tc_CosNotifyChannelAdmin_mAdminLimitExceeded;
#endif


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ConsumerAdmin = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0", "ConsumerAdmin", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ConsumerAdmin = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0", "ConsumerAdmin", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_SupplierAdmin = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0", "SupplierAdmin", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_SupplierAdmin = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0", "SupplierAdmin", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_EventChannel = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0", "EventChannel", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_EventChannel = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0", "EventChannel", &_0RL_tcTrack);
#endif

static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mChannelID = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/CosNotifyChannelAdmin/ChannelID:1.0", "ChannelID", CORBA::TypeCode::PR_long_tc(), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ChannelID = _0RL_tc_CosNotifyChannelAdmin_mChannelID;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ChannelID = _0RL_tc_CosNotifyChannelAdmin_mChannelID;
#endif

static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mChannelIDSeq = CORBA::TypeCode::PR_alias_tc("IDL:omg.org/CosNotifyChannelAdmin/ChannelIDSeq:1.0", "ChannelIDSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_CosNotifyChannelAdmin_mChannelID, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ChannelIDSeq = _0RL_tc_CosNotifyChannelAdmin_mChannelIDSeq;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ChannelIDSeq = _0RL_tc_CosNotifyChannelAdmin_mChannelIDSeq;
#endif


static CORBA::TypeCode_ptr _0RL_tc_CosNotifyChannelAdmin_mChannelNotFound = CORBA::TypeCode::PR_exception_tc("IDL:omg.org/CosNotifyChannelAdmin/ChannelNotFound:1.0", "ChannelNotFound", (CORBA::PR_structMember*) 0, 0, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_ChannelNotFound = _0RL_tc_CosNotifyChannelAdmin_mChannelNotFound;
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_ChannelNotFound = _0RL_tc_CosNotifyChannelAdmin_mChannelNotFound;
#endif


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace CosNotifyChannelAdmin { 
  const ::CORBA::TypeCode_ptr _tc_EventChannelFactory = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0", "EventChannelFactory", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr CosNotifyChannelAdmin::_tc_EventChannelFactory = CORBA::TypeCode::PR_interface_tc("IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0", "EventChannelFactory", &_0RL_tcTrack);
#endif


static void _0RL_CosNotifyChannelAdmin_mConnectionAlreadyActive_marshal_fn(cdrStream& _s, void* _v)
{
  const CosNotifyChannelAdmin::ConnectionAlreadyActive* _p = (const CosNotifyChannelAdmin::ConnectionAlreadyActive*)_v;
  *_p >>= _s;
}
static void _0RL_CosNotifyChannelAdmin_mConnectionAlreadyActive_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CosNotifyChannelAdmin::ConnectionAlreadyActive* _p = new CosNotifyChannelAdmin::ConnectionAlreadyActive;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_CosNotifyChannelAdmin_mConnectionAlreadyActive_destructor_fn(void* _v)
{
  CosNotifyChannelAdmin::ConnectionAlreadyActive* _p = (CosNotifyChannelAdmin::ConnectionAlreadyActive*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::ConnectionAlreadyActive& _s)
{
  CosNotifyChannelAdmin::ConnectionAlreadyActive* _p = new CosNotifyChannelAdmin::ConnectionAlreadyActive(_s);
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mConnectionAlreadyActive,
               _0RL_CosNotifyChannelAdmin_mConnectionAlreadyActive_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mConnectionAlreadyActive_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::ConnectionAlreadyActive* _sp)
{
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mConnectionAlreadyActive,
               _0RL_CosNotifyChannelAdmin_mConnectionAlreadyActive_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mConnectionAlreadyActive_destructor_fn,
               (CosNotifyChannelAdmin::ConnectionAlreadyActive*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const CosNotifyChannelAdmin::ConnectionAlreadyActive*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_CosNotifyChannelAdmin_mConnectionAlreadyActive,
                    _0RL_CosNotifyChannelAdmin_mConnectionAlreadyActive_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mConnectionAlreadyActive_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mConnectionAlreadyActive_destructor_fn,
                    _v)) {
    _sp = (const CosNotifyChannelAdmin::ConnectionAlreadyActive*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cCosNotifyChannelAdmin_mConnectionAlreadyActive(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const CosNotifyChannelAdmin::ConnectionAlreadyActive & _ex = (const CosNotifyChannelAdmin::ConnectionAlreadyActive &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cCosNotifyChannelAdmin_mConnectionAlreadyActive (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const CosNotifyChannelAdmin::ConnectionAlreadyActive* _ex = (const CosNotifyChannelAdmin::ConnectionAlreadyActive*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mConnectionAlreadyActive {
public:
  _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mConnectionAlreadyActive() {
    CosNotifyChannelAdmin::ConnectionAlreadyActive::insertToAnyFn = _0RL_insertToAny__cCosNotifyChannelAdmin_mConnectionAlreadyActive;
    CosNotifyChannelAdmin::ConnectionAlreadyActive::insertToAnyFnNCP = _0RL_insertToAnyNCP__cCosNotifyChannelAdmin_mConnectionAlreadyActive;
  }
};
static _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mConnectionAlreadyActive _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mConnectionAlreadyActive_;


static void _0RL_CosNotifyChannelAdmin_mConnectionAlreadyInactive_marshal_fn(cdrStream& _s, void* _v)
{
  const CosNotifyChannelAdmin::ConnectionAlreadyInactive* _p = (const CosNotifyChannelAdmin::ConnectionAlreadyInactive*)_v;
  *_p >>= _s;
}
static void _0RL_CosNotifyChannelAdmin_mConnectionAlreadyInactive_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CosNotifyChannelAdmin::ConnectionAlreadyInactive* _p = new CosNotifyChannelAdmin::ConnectionAlreadyInactive;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_CosNotifyChannelAdmin_mConnectionAlreadyInactive_destructor_fn(void* _v)
{
  CosNotifyChannelAdmin::ConnectionAlreadyInactive* _p = (CosNotifyChannelAdmin::ConnectionAlreadyInactive*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::ConnectionAlreadyInactive& _s)
{
  CosNotifyChannelAdmin::ConnectionAlreadyInactive* _p = new CosNotifyChannelAdmin::ConnectionAlreadyInactive(_s);
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mConnectionAlreadyInactive,
               _0RL_CosNotifyChannelAdmin_mConnectionAlreadyInactive_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mConnectionAlreadyInactive_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::ConnectionAlreadyInactive* _sp)
{
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mConnectionAlreadyInactive,
               _0RL_CosNotifyChannelAdmin_mConnectionAlreadyInactive_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mConnectionAlreadyInactive_destructor_fn,
               (CosNotifyChannelAdmin::ConnectionAlreadyInactive*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const CosNotifyChannelAdmin::ConnectionAlreadyInactive*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_CosNotifyChannelAdmin_mConnectionAlreadyInactive,
                    _0RL_CosNotifyChannelAdmin_mConnectionAlreadyInactive_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mConnectionAlreadyInactive_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mConnectionAlreadyInactive_destructor_fn,
                    _v)) {
    _sp = (const CosNotifyChannelAdmin::ConnectionAlreadyInactive*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cCosNotifyChannelAdmin_mConnectionAlreadyInactive(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const CosNotifyChannelAdmin::ConnectionAlreadyInactive & _ex = (const CosNotifyChannelAdmin::ConnectionAlreadyInactive &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cCosNotifyChannelAdmin_mConnectionAlreadyInactive (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const CosNotifyChannelAdmin::ConnectionAlreadyInactive* _ex = (const CosNotifyChannelAdmin::ConnectionAlreadyInactive*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mConnectionAlreadyInactive {
public:
  _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mConnectionAlreadyInactive() {
    CosNotifyChannelAdmin::ConnectionAlreadyInactive::insertToAnyFn = _0RL_insertToAny__cCosNotifyChannelAdmin_mConnectionAlreadyInactive;
    CosNotifyChannelAdmin::ConnectionAlreadyInactive::insertToAnyFnNCP = _0RL_insertToAnyNCP__cCosNotifyChannelAdmin_mConnectionAlreadyInactive;
  }
};
static _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mConnectionAlreadyInactive _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mConnectionAlreadyInactive_;


static void _0RL_CosNotifyChannelAdmin_mNotConnected_marshal_fn(cdrStream& _s, void* _v)
{
  const CosNotifyChannelAdmin::NotConnected* _p = (const CosNotifyChannelAdmin::NotConnected*)_v;
  *_p >>= _s;
}
static void _0RL_CosNotifyChannelAdmin_mNotConnected_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CosNotifyChannelAdmin::NotConnected* _p = new CosNotifyChannelAdmin::NotConnected;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_CosNotifyChannelAdmin_mNotConnected_destructor_fn(void* _v)
{
  CosNotifyChannelAdmin::NotConnected* _p = (CosNotifyChannelAdmin::NotConnected*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::NotConnected& _s)
{
  CosNotifyChannelAdmin::NotConnected* _p = new CosNotifyChannelAdmin::NotConnected(_s);
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mNotConnected,
               _0RL_CosNotifyChannelAdmin_mNotConnected_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mNotConnected_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::NotConnected* _sp)
{
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mNotConnected,
               _0RL_CosNotifyChannelAdmin_mNotConnected_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mNotConnected_destructor_fn,
               (CosNotifyChannelAdmin::NotConnected*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const CosNotifyChannelAdmin::NotConnected*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_CosNotifyChannelAdmin_mNotConnected,
                    _0RL_CosNotifyChannelAdmin_mNotConnected_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mNotConnected_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mNotConnected_destructor_fn,
                    _v)) {
    _sp = (const CosNotifyChannelAdmin::NotConnected*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cCosNotifyChannelAdmin_mNotConnected(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const CosNotifyChannelAdmin::NotConnected & _ex = (const CosNotifyChannelAdmin::NotConnected &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cCosNotifyChannelAdmin_mNotConnected (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const CosNotifyChannelAdmin::NotConnected* _ex = (const CosNotifyChannelAdmin::NotConnected*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mNotConnected {
public:
  _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mNotConnected() {
    CosNotifyChannelAdmin::NotConnected::insertToAnyFn = _0RL_insertToAny__cCosNotifyChannelAdmin_mNotConnected;
    CosNotifyChannelAdmin::NotConnected::insertToAnyFnNCP = _0RL_insertToAnyNCP__cCosNotifyChannelAdmin_mNotConnected;
  }
};
static _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mNotConnected _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mNotConnected_;

static void _0RL_CosNotifyChannelAdmin_mProxyType_marshal_fn(cdrStream& _s, void* _v)
{
  CosNotifyChannelAdmin::ProxyType* _p = (CosNotifyChannelAdmin::ProxyType*)_v;
  *_p >>= _s;
}
static void _0RL_CosNotifyChannelAdmin_mProxyType_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CosNotifyChannelAdmin::ProxyType* _p = (CosNotifyChannelAdmin::ProxyType*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyType _s)
{
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mProxyType,
               _0RL_CosNotifyChannelAdmin_mProxyType_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyType& _s)
{
  return _a.PR_extract(_0RL_tc_CosNotifyChannelAdmin_mProxyType,
                       _0RL_CosNotifyChannelAdmin_mProxyType_unmarshal_fn,
                       &_s);
}

static void _0RL_CosNotifyChannelAdmin_mObtainInfoMode_marshal_fn(cdrStream& _s, void* _v)
{
  CosNotifyChannelAdmin::ObtainInfoMode* _p = (CosNotifyChannelAdmin::ObtainInfoMode*)_v;
  *_p >>= _s;
}
static void _0RL_CosNotifyChannelAdmin_mObtainInfoMode_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CosNotifyChannelAdmin::ObtainInfoMode* _p = (CosNotifyChannelAdmin::ObtainInfoMode*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ObtainInfoMode _s)
{
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mObtainInfoMode,
               _0RL_CosNotifyChannelAdmin_mObtainInfoMode_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::ObtainInfoMode& _s)
{
  return _a.PR_extract(_0RL_tc_CosNotifyChannelAdmin_mObtainInfoMode,
                       _0RL_CosNotifyChannelAdmin_mObtainInfoMode_unmarshal_fn,
                       &_s);
}

static void _0RL_CosNotifyChannelAdmin_mProxyConsumer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mProxyConsumer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::ProxyConsumer::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mProxyConsumer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyConsumer_ptr _o)
{
  CosNotifyChannelAdmin::ProxyConsumer_ptr _no = CosNotifyChannelAdmin::ProxyConsumer::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_ProxyConsumer,
               _0RL_CosNotifyChannelAdmin_mProxyConsumer_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mProxyConsumer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyConsumer_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_ProxyConsumer,
               _0RL_CosNotifyChannelAdmin_mProxyConsumer_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mProxyConsumer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::ProxyConsumer::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyConsumer_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_ProxyConsumer,
                    _0RL_CosNotifyChannelAdmin_mProxyConsumer_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mProxyConsumer_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mProxyConsumer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::ProxyConsumer_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::ProxyConsumer::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::ProxyConsumer::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mProxySupplier_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mProxySupplier_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::ProxySupplier::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mProxySupplier_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ProxySupplier_ptr _o)
{
  CosNotifyChannelAdmin::ProxySupplier_ptr _no = CosNotifyChannelAdmin::ProxySupplier::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_ProxySupplier,
               _0RL_CosNotifyChannelAdmin_mProxySupplier_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mProxySupplier_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ProxySupplier_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_ProxySupplier,
               _0RL_CosNotifyChannelAdmin_mProxySupplier_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mProxySupplier_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::ProxySupplier::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::ProxySupplier_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_ProxySupplier,
                    _0RL_CosNotifyChannelAdmin_mProxySupplier_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mProxySupplier_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mProxySupplier_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::ProxySupplier_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::ProxySupplier::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::ProxySupplier::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mProxyPushConsumer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mProxyPushConsumer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::ProxyPushConsumer::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mProxyPushConsumer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyPushConsumer_ptr _o)
{
  CosNotifyChannelAdmin::ProxyPushConsumer_ptr _no = CosNotifyChannelAdmin::ProxyPushConsumer::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_ProxyPushConsumer,
               _0RL_CosNotifyChannelAdmin_mProxyPushConsumer_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mProxyPushConsumer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyPushConsumer_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_ProxyPushConsumer,
               _0RL_CosNotifyChannelAdmin_mProxyPushConsumer_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mProxyPushConsumer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::ProxyPushConsumer::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyPushConsumer_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_ProxyPushConsumer,
                    _0RL_CosNotifyChannelAdmin_mProxyPushConsumer_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mProxyPushConsumer_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mProxyPushConsumer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::ProxyPushConsumer_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::ProxyPushConsumer::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::ProxyPushConsumer::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mStructuredProxyPushConsumer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mStructuredProxyPushConsumer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::StructuredProxyPushConsumer::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mStructuredProxyPushConsumer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr _o)
{
  CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr _no = CosNotifyChannelAdmin::StructuredProxyPushConsumer::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_StructuredProxyPushConsumer,
               _0RL_CosNotifyChannelAdmin_mStructuredProxyPushConsumer_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mStructuredProxyPushConsumer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_StructuredProxyPushConsumer,
               _0RL_CosNotifyChannelAdmin_mStructuredProxyPushConsumer_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mStructuredProxyPushConsumer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::StructuredProxyPushConsumer::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_StructuredProxyPushConsumer,
                    _0RL_CosNotifyChannelAdmin_mStructuredProxyPushConsumer_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mStructuredProxyPushConsumer_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mStructuredProxyPushConsumer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::StructuredProxyPushConsumer::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::StructuredProxyPushConsumer::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mSequenceProxyPushConsumer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mSequenceProxyPushConsumer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::SequenceProxyPushConsumer::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mSequenceProxyPushConsumer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr _o)
{
  CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr _no = CosNotifyChannelAdmin::SequenceProxyPushConsumer::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_SequenceProxyPushConsumer,
               _0RL_CosNotifyChannelAdmin_mSequenceProxyPushConsumer_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mSequenceProxyPushConsumer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_SequenceProxyPushConsumer,
               _0RL_CosNotifyChannelAdmin_mSequenceProxyPushConsumer_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mSequenceProxyPushConsumer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::SequenceProxyPushConsumer::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_SequenceProxyPushConsumer,
                    _0RL_CosNotifyChannelAdmin_mSequenceProxyPushConsumer_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mSequenceProxyPushConsumer_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mSequenceProxyPushConsumer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::SequenceProxyPushConsumer::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::SequenceProxyPushConsumer::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mProxyPullSupplier_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mProxyPullSupplier_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::ProxyPullSupplier::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mProxyPullSupplier_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyPullSupplier_ptr _o)
{
  CosNotifyChannelAdmin::ProxyPullSupplier_ptr _no = CosNotifyChannelAdmin::ProxyPullSupplier::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_ProxyPullSupplier,
               _0RL_CosNotifyChannelAdmin_mProxyPullSupplier_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mProxyPullSupplier_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyPullSupplier_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_ProxyPullSupplier,
               _0RL_CosNotifyChannelAdmin_mProxyPullSupplier_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mProxyPullSupplier_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::ProxyPullSupplier::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyPullSupplier_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_ProxyPullSupplier,
                    _0RL_CosNotifyChannelAdmin_mProxyPullSupplier_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mProxyPullSupplier_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mProxyPullSupplier_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::ProxyPullSupplier_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::ProxyPullSupplier::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::ProxyPullSupplier::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mStructuredProxyPullSupplier_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mStructuredProxyPullSupplier_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::StructuredProxyPullSupplier::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mStructuredProxyPullSupplier_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::StructuredProxyPullSupplier_ptr _o)
{
  CosNotifyChannelAdmin::StructuredProxyPullSupplier_ptr _no = CosNotifyChannelAdmin::StructuredProxyPullSupplier::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_StructuredProxyPullSupplier,
               _0RL_CosNotifyChannelAdmin_mStructuredProxyPullSupplier_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mStructuredProxyPullSupplier_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::StructuredProxyPullSupplier_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_StructuredProxyPullSupplier,
               _0RL_CosNotifyChannelAdmin_mStructuredProxyPullSupplier_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mStructuredProxyPullSupplier_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::StructuredProxyPullSupplier::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::StructuredProxyPullSupplier_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_StructuredProxyPullSupplier,
                    _0RL_CosNotifyChannelAdmin_mStructuredProxyPullSupplier_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mStructuredProxyPullSupplier_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mStructuredProxyPullSupplier_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::StructuredProxyPullSupplier_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::StructuredProxyPullSupplier::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::StructuredProxyPullSupplier::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mSequenceProxyPullSupplier_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mSequenceProxyPullSupplier_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::SequenceProxyPullSupplier::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mSequenceProxyPullSupplier_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::SequenceProxyPullSupplier_ptr _o)
{
  CosNotifyChannelAdmin::SequenceProxyPullSupplier_ptr _no = CosNotifyChannelAdmin::SequenceProxyPullSupplier::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_SequenceProxyPullSupplier,
               _0RL_CosNotifyChannelAdmin_mSequenceProxyPullSupplier_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mSequenceProxyPullSupplier_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::SequenceProxyPullSupplier_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_SequenceProxyPullSupplier,
               _0RL_CosNotifyChannelAdmin_mSequenceProxyPullSupplier_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mSequenceProxyPullSupplier_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::SequenceProxyPullSupplier::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::SequenceProxyPullSupplier_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_SequenceProxyPullSupplier,
                    _0RL_CosNotifyChannelAdmin_mSequenceProxyPullSupplier_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mSequenceProxyPullSupplier_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mSequenceProxyPullSupplier_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::SequenceProxyPullSupplier_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::SequenceProxyPullSupplier::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::SequenceProxyPullSupplier::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mProxyPullConsumer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mProxyPullConsumer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::ProxyPullConsumer::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mProxyPullConsumer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyPullConsumer_ptr _o)
{
  CosNotifyChannelAdmin::ProxyPullConsumer_ptr _no = CosNotifyChannelAdmin::ProxyPullConsumer::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_ProxyPullConsumer,
               _0RL_CosNotifyChannelAdmin_mProxyPullConsumer_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mProxyPullConsumer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyPullConsumer_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_ProxyPullConsumer,
               _0RL_CosNotifyChannelAdmin_mProxyPullConsumer_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mProxyPullConsumer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::ProxyPullConsumer::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyPullConsumer_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_ProxyPullConsumer,
                    _0RL_CosNotifyChannelAdmin_mProxyPullConsumer_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mProxyPullConsumer_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mProxyPullConsumer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::ProxyPullConsumer_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::ProxyPullConsumer::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::ProxyPullConsumer::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mStructuredProxyPullConsumer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mStructuredProxyPullConsumer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::StructuredProxyPullConsumer::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mStructuredProxyPullConsumer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::StructuredProxyPullConsumer_ptr _o)
{
  CosNotifyChannelAdmin::StructuredProxyPullConsumer_ptr _no = CosNotifyChannelAdmin::StructuredProxyPullConsumer::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_StructuredProxyPullConsumer,
               _0RL_CosNotifyChannelAdmin_mStructuredProxyPullConsumer_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mStructuredProxyPullConsumer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::StructuredProxyPullConsumer_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_StructuredProxyPullConsumer,
               _0RL_CosNotifyChannelAdmin_mStructuredProxyPullConsumer_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mStructuredProxyPullConsumer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::StructuredProxyPullConsumer::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::StructuredProxyPullConsumer_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_StructuredProxyPullConsumer,
                    _0RL_CosNotifyChannelAdmin_mStructuredProxyPullConsumer_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mStructuredProxyPullConsumer_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mStructuredProxyPullConsumer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::StructuredProxyPullConsumer_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::StructuredProxyPullConsumer::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::StructuredProxyPullConsumer::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mSequenceProxyPullConsumer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mSequenceProxyPullConsumer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::SequenceProxyPullConsumer::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mSequenceProxyPullConsumer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::SequenceProxyPullConsumer_ptr _o)
{
  CosNotifyChannelAdmin::SequenceProxyPullConsumer_ptr _no = CosNotifyChannelAdmin::SequenceProxyPullConsumer::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_SequenceProxyPullConsumer,
               _0RL_CosNotifyChannelAdmin_mSequenceProxyPullConsumer_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mSequenceProxyPullConsumer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::SequenceProxyPullConsumer_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_SequenceProxyPullConsumer,
               _0RL_CosNotifyChannelAdmin_mSequenceProxyPullConsumer_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mSequenceProxyPullConsumer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::SequenceProxyPullConsumer::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::SequenceProxyPullConsumer_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_SequenceProxyPullConsumer,
                    _0RL_CosNotifyChannelAdmin_mSequenceProxyPullConsumer_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mSequenceProxyPullConsumer_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mSequenceProxyPullConsumer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::SequenceProxyPullConsumer_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::SequenceProxyPullConsumer::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::SequenceProxyPullConsumer::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mProxyPushSupplier_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mProxyPushSupplier_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::ProxyPushSupplier::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mProxyPushSupplier_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyPushSupplier_ptr _o)
{
  CosNotifyChannelAdmin::ProxyPushSupplier_ptr _no = CosNotifyChannelAdmin::ProxyPushSupplier::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_ProxyPushSupplier,
               _0RL_CosNotifyChannelAdmin_mProxyPushSupplier_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mProxyPushSupplier_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyPushSupplier_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_ProxyPushSupplier,
               _0RL_CosNotifyChannelAdmin_mProxyPushSupplier_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mProxyPushSupplier_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::ProxyPushSupplier::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyPushSupplier_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_ProxyPushSupplier,
                    _0RL_CosNotifyChannelAdmin_mProxyPushSupplier_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mProxyPushSupplier_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mProxyPushSupplier_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::ProxyPushSupplier_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::ProxyPushSupplier::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::ProxyPushSupplier::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mStructuredProxyPushSupplier_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mStructuredProxyPushSupplier_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::StructuredProxyPushSupplier::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mStructuredProxyPushSupplier_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr _o)
{
  CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr _no = CosNotifyChannelAdmin::StructuredProxyPushSupplier::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_StructuredProxyPushSupplier,
               _0RL_CosNotifyChannelAdmin_mStructuredProxyPushSupplier_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mStructuredProxyPushSupplier_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_StructuredProxyPushSupplier,
               _0RL_CosNotifyChannelAdmin_mStructuredProxyPushSupplier_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mStructuredProxyPushSupplier_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::StructuredProxyPushSupplier::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_StructuredProxyPushSupplier,
                    _0RL_CosNotifyChannelAdmin_mStructuredProxyPushSupplier_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mStructuredProxyPushSupplier_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mStructuredProxyPushSupplier_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::StructuredProxyPushSupplier::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::StructuredProxyPushSupplier::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mSequenceProxyPushSupplier_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mSequenceProxyPushSupplier_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::SequenceProxyPushSupplier::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mSequenceProxyPushSupplier_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr _o)
{
  CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr _no = CosNotifyChannelAdmin::SequenceProxyPushSupplier::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_SequenceProxyPushSupplier,
               _0RL_CosNotifyChannelAdmin_mSequenceProxyPushSupplier_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mSequenceProxyPushSupplier_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_SequenceProxyPushSupplier,
               _0RL_CosNotifyChannelAdmin_mSequenceProxyPushSupplier_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mSequenceProxyPushSupplier_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::SequenceProxyPushSupplier::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_SequenceProxyPushSupplier,
                    _0RL_CosNotifyChannelAdmin_mSequenceProxyPushSupplier_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mSequenceProxyPushSupplier_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mSequenceProxyPushSupplier_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::SequenceProxyPushSupplier::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::SequenceProxyPushSupplier::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mProxyIDSeq_marshal_fn(cdrStream& _s, void* _v)
{
  CosNotifyChannelAdmin::ProxyIDSeq* _p = (CosNotifyChannelAdmin::ProxyIDSeq*)_v;
  *_p >>= _s;
}
static void _0RL_CosNotifyChannelAdmin_mProxyIDSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CosNotifyChannelAdmin::ProxyIDSeq* _p = new CosNotifyChannelAdmin::ProxyIDSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_CosNotifyChannelAdmin_mProxyIDSeq_destructor_fn(void* _v)
{
  CosNotifyChannelAdmin::ProxyIDSeq* _p = (CosNotifyChannelAdmin::ProxyIDSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::ProxyIDSeq& _s)
{
  CosNotifyChannelAdmin::ProxyIDSeq* _p = new CosNotifyChannelAdmin::ProxyIDSeq(_s);
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mProxyIDSeq,
               _0RL_CosNotifyChannelAdmin_mProxyIDSeq_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mProxyIDSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyIDSeq* _sp)
{
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mProxyIDSeq,
               _0RL_CosNotifyChannelAdmin_mProxyIDSeq_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mProxyIDSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::ProxyIDSeq*& _sp)
{
  return _a >>= (const CosNotifyChannelAdmin::ProxyIDSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const CosNotifyChannelAdmin::ProxyIDSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_CosNotifyChannelAdmin_mProxyIDSeq,
                    _0RL_CosNotifyChannelAdmin_mProxyIDSeq_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mProxyIDSeq_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mProxyIDSeq_destructor_fn,
                    _v)) {
    _sp = (const CosNotifyChannelAdmin::ProxyIDSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mClientType_marshal_fn(cdrStream& _s, void* _v)
{
  CosNotifyChannelAdmin::ClientType* _p = (CosNotifyChannelAdmin::ClientType*)_v;
  *_p >>= _s;
}
static void _0RL_CosNotifyChannelAdmin_mClientType_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CosNotifyChannelAdmin::ClientType* _p = (CosNotifyChannelAdmin::ClientType*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ClientType _s)
{
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mClientType,
               _0RL_CosNotifyChannelAdmin_mClientType_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::ClientType& _s)
{
  return _a.PR_extract(_0RL_tc_CosNotifyChannelAdmin_mClientType,
                       _0RL_CosNotifyChannelAdmin_mClientType_unmarshal_fn,
                       &_s);
}

static void _0RL_CosNotifyChannelAdmin_mInterFilterGroupOperator_marshal_fn(cdrStream& _s, void* _v)
{
  CosNotifyChannelAdmin::InterFilterGroupOperator* _p = (CosNotifyChannelAdmin::InterFilterGroupOperator*)_v;
  *_p >>= _s;
}
static void _0RL_CosNotifyChannelAdmin_mInterFilterGroupOperator_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CosNotifyChannelAdmin::InterFilterGroupOperator* _p = (CosNotifyChannelAdmin::InterFilterGroupOperator*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::InterFilterGroupOperator _s)
{
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mInterFilterGroupOperator,
               _0RL_CosNotifyChannelAdmin_mInterFilterGroupOperator_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::InterFilterGroupOperator& _s)
{
  return _a.PR_extract(_0RL_tc_CosNotifyChannelAdmin_mInterFilterGroupOperator,
                       _0RL_CosNotifyChannelAdmin_mInterFilterGroupOperator_unmarshal_fn,
                       &_s);
}

static void _0RL_CosNotifyChannelAdmin_mAdminIDSeq_marshal_fn(cdrStream& _s, void* _v)
{
  CosNotifyChannelAdmin::AdminIDSeq* _p = (CosNotifyChannelAdmin::AdminIDSeq*)_v;
  *_p >>= _s;
}
static void _0RL_CosNotifyChannelAdmin_mAdminIDSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CosNotifyChannelAdmin::AdminIDSeq* _p = new CosNotifyChannelAdmin::AdminIDSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_CosNotifyChannelAdmin_mAdminIDSeq_destructor_fn(void* _v)
{
  CosNotifyChannelAdmin::AdminIDSeq* _p = (CosNotifyChannelAdmin::AdminIDSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::AdminIDSeq& _s)
{
  CosNotifyChannelAdmin::AdminIDSeq* _p = new CosNotifyChannelAdmin::AdminIDSeq(_s);
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mAdminIDSeq,
               _0RL_CosNotifyChannelAdmin_mAdminIDSeq_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mAdminIDSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::AdminIDSeq* _sp)
{
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mAdminIDSeq,
               _0RL_CosNotifyChannelAdmin_mAdminIDSeq_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mAdminIDSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::AdminIDSeq*& _sp)
{
  return _a >>= (const CosNotifyChannelAdmin::AdminIDSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const CosNotifyChannelAdmin::AdminIDSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_CosNotifyChannelAdmin_mAdminIDSeq,
                    _0RL_CosNotifyChannelAdmin_mAdminIDSeq_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mAdminIDSeq_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mAdminIDSeq_destructor_fn,
                    _v)) {
    _sp = (const CosNotifyChannelAdmin::AdminIDSeq*)_v;
    return 1;
  }
  return 0;
}


static void _0RL_CosNotifyChannelAdmin_mAdminNotFound_marshal_fn(cdrStream& _s, void* _v)
{
  const CosNotifyChannelAdmin::AdminNotFound* _p = (const CosNotifyChannelAdmin::AdminNotFound*)_v;
  *_p >>= _s;
}
static void _0RL_CosNotifyChannelAdmin_mAdminNotFound_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CosNotifyChannelAdmin::AdminNotFound* _p = new CosNotifyChannelAdmin::AdminNotFound;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_CosNotifyChannelAdmin_mAdminNotFound_destructor_fn(void* _v)
{
  CosNotifyChannelAdmin::AdminNotFound* _p = (CosNotifyChannelAdmin::AdminNotFound*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::AdminNotFound& _s)
{
  CosNotifyChannelAdmin::AdminNotFound* _p = new CosNotifyChannelAdmin::AdminNotFound(_s);
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mAdminNotFound,
               _0RL_CosNotifyChannelAdmin_mAdminNotFound_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mAdminNotFound_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::AdminNotFound* _sp)
{
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mAdminNotFound,
               _0RL_CosNotifyChannelAdmin_mAdminNotFound_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mAdminNotFound_destructor_fn,
               (CosNotifyChannelAdmin::AdminNotFound*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const CosNotifyChannelAdmin::AdminNotFound*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_CosNotifyChannelAdmin_mAdminNotFound,
                    _0RL_CosNotifyChannelAdmin_mAdminNotFound_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mAdminNotFound_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mAdminNotFound_destructor_fn,
                    _v)) {
    _sp = (const CosNotifyChannelAdmin::AdminNotFound*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cCosNotifyChannelAdmin_mAdminNotFound(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const CosNotifyChannelAdmin::AdminNotFound & _ex = (const CosNotifyChannelAdmin::AdminNotFound &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cCosNotifyChannelAdmin_mAdminNotFound (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const CosNotifyChannelAdmin::AdminNotFound* _ex = (const CosNotifyChannelAdmin::AdminNotFound*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mAdminNotFound {
public:
  _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mAdminNotFound() {
    CosNotifyChannelAdmin::AdminNotFound::insertToAnyFn = _0RL_insertToAny__cCosNotifyChannelAdmin_mAdminNotFound;
    CosNotifyChannelAdmin::AdminNotFound::insertToAnyFnNCP = _0RL_insertToAnyNCP__cCosNotifyChannelAdmin_mAdminNotFound;
  }
};
static _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mAdminNotFound _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mAdminNotFound_;


static void _0RL_CosNotifyChannelAdmin_mProxyNotFound_marshal_fn(cdrStream& _s, void* _v)
{
  const CosNotifyChannelAdmin::ProxyNotFound* _p = (const CosNotifyChannelAdmin::ProxyNotFound*)_v;
  *_p >>= _s;
}
static void _0RL_CosNotifyChannelAdmin_mProxyNotFound_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CosNotifyChannelAdmin::ProxyNotFound* _p = new CosNotifyChannelAdmin::ProxyNotFound;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_CosNotifyChannelAdmin_mProxyNotFound_destructor_fn(void* _v)
{
  CosNotifyChannelAdmin::ProxyNotFound* _p = (CosNotifyChannelAdmin::ProxyNotFound*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::ProxyNotFound& _s)
{
  CosNotifyChannelAdmin::ProxyNotFound* _p = new CosNotifyChannelAdmin::ProxyNotFound(_s);
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mProxyNotFound,
               _0RL_CosNotifyChannelAdmin_mProxyNotFound_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mProxyNotFound_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::ProxyNotFound* _sp)
{
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mProxyNotFound,
               _0RL_CosNotifyChannelAdmin_mProxyNotFound_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mProxyNotFound_destructor_fn,
               (CosNotifyChannelAdmin::ProxyNotFound*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const CosNotifyChannelAdmin::ProxyNotFound*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_CosNotifyChannelAdmin_mProxyNotFound,
                    _0RL_CosNotifyChannelAdmin_mProxyNotFound_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mProxyNotFound_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mProxyNotFound_destructor_fn,
                    _v)) {
    _sp = (const CosNotifyChannelAdmin::ProxyNotFound*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cCosNotifyChannelAdmin_mProxyNotFound(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const CosNotifyChannelAdmin::ProxyNotFound & _ex = (const CosNotifyChannelAdmin::ProxyNotFound &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cCosNotifyChannelAdmin_mProxyNotFound (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const CosNotifyChannelAdmin::ProxyNotFound* _ex = (const CosNotifyChannelAdmin::ProxyNotFound*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mProxyNotFound {
public:
  _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mProxyNotFound() {
    CosNotifyChannelAdmin::ProxyNotFound::insertToAnyFn = _0RL_insertToAny__cCosNotifyChannelAdmin_mProxyNotFound;
    CosNotifyChannelAdmin::ProxyNotFound::insertToAnyFnNCP = _0RL_insertToAnyNCP__cCosNotifyChannelAdmin_mProxyNotFound;
  }
};
static _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mProxyNotFound _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mProxyNotFound_;

static void _0RL_CosNotifyChannelAdmin_mAdminLimit_marshal_fn(cdrStream& _s, void* _v)
{
  CosNotifyChannelAdmin::AdminLimit* _p = (CosNotifyChannelAdmin::AdminLimit*)_v;
  *_p >>= _s;
}
static void _0RL_CosNotifyChannelAdmin_mAdminLimit_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CosNotifyChannelAdmin::AdminLimit* _p = new CosNotifyChannelAdmin::AdminLimit;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_CosNotifyChannelAdmin_mAdminLimit_destructor_fn(void* _v)
{
  CosNotifyChannelAdmin::AdminLimit* _p = (CosNotifyChannelAdmin::AdminLimit*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::AdminLimit& _s)
{
  CosNotifyChannelAdmin::AdminLimit* _p = new CosNotifyChannelAdmin::AdminLimit(_s);
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mAdminLimit,
               _0RL_CosNotifyChannelAdmin_mAdminLimit_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mAdminLimit_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::AdminLimit* _sp)
{
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mAdminLimit,
               _0RL_CosNotifyChannelAdmin_mAdminLimit_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mAdminLimit_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::AdminLimit*& _sp)
{
  return _a >>= (const CosNotifyChannelAdmin::AdminLimit*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const CosNotifyChannelAdmin::AdminLimit*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_CosNotifyChannelAdmin_mAdminLimit,
                    _0RL_CosNotifyChannelAdmin_mAdminLimit_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mAdminLimit_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mAdminLimit_destructor_fn,
                    _v)) {
    _sp = (const CosNotifyChannelAdmin::AdminLimit*)_v;
    return 1;
  }
  return 0;
}


static void _0RL_CosNotifyChannelAdmin_mAdminLimitExceeded_marshal_fn(cdrStream& _s, void* _v)
{
  const CosNotifyChannelAdmin::AdminLimitExceeded* _p = (const CosNotifyChannelAdmin::AdminLimitExceeded*)_v;
  *_p >>= _s;
}
static void _0RL_CosNotifyChannelAdmin_mAdminLimitExceeded_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CosNotifyChannelAdmin::AdminLimitExceeded* _p = new CosNotifyChannelAdmin::AdminLimitExceeded;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_CosNotifyChannelAdmin_mAdminLimitExceeded_destructor_fn(void* _v)
{
  CosNotifyChannelAdmin::AdminLimitExceeded* _p = (CosNotifyChannelAdmin::AdminLimitExceeded*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::AdminLimitExceeded& _s)
{
  CosNotifyChannelAdmin::AdminLimitExceeded* _p = new CosNotifyChannelAdmin::AdminLimitExceeded(_s);
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mAdminLimitExceeded,
               _0RL_CosNotifyChannelAdmin_mAdminLimitExceeded_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mAdminLimitExceeded_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::AdminLimitExceeded* _sp)
{
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mAdminLimitExceeded,
               _0RL_CosNotifyChannelAdmin_mAdminLimitExceeded_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mAdminLimitExceeded_destructor_fn,
               (CosNotifyChannelAdmin::AdminLimitExceeded*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const CosNotifyChannelAdmin::AdminLimitExceeded*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_CosNotifyChannelAdmin_mAdminLimitExceeded,
                    _0RL_CosNotifyChannelAdmin_mAdminLimitExceeded_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mAdminLimitExceeded_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mAdminLimitExceeded_destructor_fn,
                    _v)) {
    _sp = (const CosNotifyChannelAdmin::AdminLimitExceeded*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cCosNotifyChannelAdmin_mAdminLimitExceeded(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const CosNotifyChannelAdmin::AdminLimitExceeded & _ex = (const CosNotifyChannelAdmin::AdminLimitExceeded &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cCosNotifyChannelAdmin_mAdminLimitExceeded (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const CosNotifyChannelAdmin::AdminLimitExceeded* _ex = (const CosNotifyChannelAdmin::AdminLimitExceeded*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mAdminLimitExceeded {
public:
  _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mAdminLimitExceeded() {
    CosNotifyChannelAdmin::AdminLimitExceeded::insertToAnyFn = _0RL_insertToAny__cCosNotifyChannelAdmin_mAdminLimitExceeded;
    CosNotifyChannelAdmin::AdminLimitExceeded::insertToAnyFnNCP = _0RL_insertToAnyNCP__cCosNotifyChannelAdmin_mAdminLimitExceeded;
  }
};
static _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mAdminLimitExceeded _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mAdminLimitExceeded_;

static void _0RL_CosNotifyChannelAdmin_mConsumerAdmin_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mConsumerAdmin_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::ConsumerAdmin::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mConsumerAdmin_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ConsumerAdmin_ptr _o)
{
  CosNotifyChannelAdmin::ConsumerAdmin_ptr _no = CosNotifyChannelAdmin::ConsumerAdmin::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_ConsumerAdmin,
               _0RL_CosNotifyChannelAdmin_mConsumerAdmin_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mConsumerAdmin_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ConsumerAdmin_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_ConsumerAdmin,
               _0RL_CosNotifyChannelAdmin_mConsumerAdmin_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mConsumerAdmin_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::ConsumerAdmin::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::ConsumerAdmin_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_ConsumerAdmin,
                    _0RL_CosNotifyChannelAdmin_mConsumerAdmin_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mConsumerAdmin_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mConsumerAdmin_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::ConsumerAdmin_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::ConsumerAdmin::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::ConsumerAdmin::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mSupplierAdmin_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mSupplierAdmin_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::SupplierAdmin::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mSupplierAdmin_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::SupplierAdmin_ptr _o)
{
  CosNotifyChannelAdmin::SupplierAdmin_ptr _no = CosNotifyChannelAdmin::SupplierAdmin::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_SupplierAdmin,
               _0RL_CosNotifyChannelAdmin_mSupplierAdmin_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mSupplierAdmin_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::SupplierAdmin_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_SupplierAdmin,
               _0RL_CosNotifyChannelAdmin_mSupplierAdmin_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mSupplierAdmin_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::SupplierAdmin::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::SupplierAdmin_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_SupplierAdmin,
                    _0RL_CosNotifyChannelAdmin_mSupplierAdmin_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mSupplierAdmin_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mSupplierAdmin_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::SupplierAdmin_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::SupplierAdmin::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::SupplierAdmin::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mEventChannel_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mEventChannel_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::EventChannel::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mEventChannel_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::EventChannel_ptr _o)
{
  CosNotifyChannelAdmin::EventChannel_ptr _no = CosNotifyChannelAdmin::EventChannel::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_EventChannel,
               _0RL_CosNotifyChannelAdmin_mEventChannel_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mEventChannel_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::EventChannel_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_EventChannel,
               _0RL_CosNotifyChannelAdmin_mEventChannel_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mEventChannel_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::EventChannel::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::EventChannel_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_EventChannel,
                    _0RL_CosNotifyChannelAdmin_mEventChannel_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mEventChannel_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mEventChannel_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::EventChannel_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::EventChannel::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::EventChannel::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_CosNotifyChannelAdmin_mChannelIDSeq_marshal_fn(cdrStream& _s, void* _v)
{
  CosNotifyChannelAdmin::ChannelIDSeq* _p = (CosNotifyChannelAdmin::ChannelIDSeq*)_v;
  *_p >>= _s;
}
static void _0RL_CosNotifyChannelAdmin_mChannelIDSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CosNotifyChannelAdmin::ChannelIDSeq* _p = new CosNotifyChannelAdmin::ChannelIDSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_CosNotifyChannelAdmin_mChannelIDSeq_destructor_fn(void* _v)
{
  CosNotifyChannelAdmin::ChannelIDSeq* _p = (CosNotifyChannelAdmin::ChannelIDSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::ChannelIDSeq& _s)
{
  CosNotifyChannelAdmin::ChannelIDSeq* _p = new CosNotifyChannelAdmin::ChannelIDSeq(_s);
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mChannelIDSeq,
               _0RL_CosNotifyChannelAdmin_mChannelIDSeq_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mChannelIDSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::ChannelIDSeq* _sp)
{
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mChannelIDSeq,
               _0RL_CosNotifyChannelAdmin_mChannelIDSeq_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mChannelIDSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::ChannelIDSeq*& _sp)
{
  return _a >>= (const CosNotifyChannelAdmin::ChannelIDSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const CosNotifyChannelAdmin::ChannelIDSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_CosNotifyChannelAdmin_mChannelIDSeq,
                    _0RL_CosNotifyChannelAdmin_mChannelIDSeq_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mChannelIDSeq_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mChannelIDSeq_destructor_fn,
                    _v)) {
    _sp = (const CosNotifyChannelAdmin::ChannelIDSeq*)_v;
    return 1;
  }
  return 0;
}


static void _0RL_CosNotifyChannelAdmin_mChannelNotFound_marshal_fn(cdrStream& _s, void* _v)
{
  const CosNotifyChannelAdmin::ChannelNotFound* _p = (const CosNotifyChannelAdmin::ChannelNotFound*)_v;
  *_p >>= _s;
}
static void _0RL_CosNotifyChannelAdmin_mChannelNotFound_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CosNotifyChannelAdmin::ChannelNotFound* _p = new CosNotifyChannelAdmin::ChannelNotFound;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_CosNotifyChannelAdmin_mChannelNotFound_destructor_fn(void* _v)
{
  CosNotifyChannelAdmin::ChannelNotFound* _p = (CosNotifyChannelAdmin::ChannelNotFound*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::ChannelNotFound& _s)
{
  CosNotifyChannelAdmin::ChannelNotFound* _p = new CosNotifyChannelAdmin::ChannelNotFound(_s);
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mChannelNotFound,
               _0RL_CosNotifyChannelAdmin_mChannelNotFound_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mChannelNotFound_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const CosNotifyChannelAdmin::ChannelNotFound* _sp)
{
  _a.PR_insert(_0RL_tc_CosNotifyChannelAdmin_mChannelNotFound,
               _0RL_CosNotifyChannelAdmin_mChannelNotFound_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mChannelNotFound_destructor_fn,
               (CosNotifyChannelAdmin::ChannelNotFound*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const CosNotifyChannelAdmin::ChannelNotFound*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_CosNotifyChannelAdmin_mChannelNotFound,
                    _0RL_CosNotifyChannelAdmin_mChannelNotFound_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mChannelNotFound_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mChannelNotFound_destructor_fn,
                    _v)) {
    _sp = (const CosNotifyChannelAdmin::ChannelNotFound*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cCosNotifyChannelAdmin_mChannelNotFound(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const CosNotifyChannelAdmin::ChannelNotFound & _ex = (const CosNotifyChannelAdmin::ChannelNotFound &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cCosNotifyChannelAdmin_mChannelNotFound (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const CosNotifyChannelAdmin::ChannelNotFound* _ex = (const CosNotifyChannelAdmin::ChannelNotFound*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mChannelNotFound {
public:
  _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mChannelNotFound() {
    CosNotifyChannelAdmin::ChannelNotFound::insertToAnyFn = _0RL_insertToAny__cCosNotifyChannelAdmin_mChannelNotFound;
    CosNotifyChannelAdmin::ChannelNotFound::insertToAnyFnNCP = _0RL_insertToAnyNCP__cCosNotifyChannelAdmin_mChannelNotFound;
  }
};
static _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mChannelNotFound _0RL_insertToAny_Singleton__cCosNotifyChannelAdmin_mChannelNotFound_;

static void _0RL_CosNotifyChannelAdmin_mEventChannelFactory_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_CosNotifyChannelAdmin_mEventChannelFactory_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(CosNotifyChannelAdmin::EventChannelFactory::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_CosNotifyChannelAdmin_mEventChannelFactory_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::EventChannelFactory_ptr _o)
{
  CosNotifyChannelAdmin::EventChannelFactory_ptr _no = CosNotifyChannelAdmin::EventChannelFactory::_duplicate(_o);
  _a.PR_insert(CosNotifyChannelAdmin::_tc_EventChannelFactory,
               _0RL_CosNotifyChannelAdmin_mEventChannelFactory_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mEventChannelFactory_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, CosNotifyChannelAdmin::EventChannelFactory_ptr* _op)
{
  _a.PR_insert(CosNotifyChannelAdmin::_tc_EventChannelFactory,
               _0RL_CosNotifyChannelAdmin_mEventChannelFactory_marshal_fn,
               _0RL_CosNotifyChannelAdmin_mEventChannelFactory_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = CosNotifyChannelAdmin::EventChannelFactory::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CosNotifyChannelAdmin::EventChannelFactory_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(CosNotifyChannelAdmin::_tc_EventChannelFactory,
                    _0RL_CosNotifyChannelAdmin_mEventChannelFactory_unmarshal_fn,
                    _0RL_CosNotifyChannelAdmin_mEventChannelFactory_marshal_fn,
                    _0RL_CosNotifyChannelAdmin_mEventChannelFactory_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (CosNotifyChannelAdmin::EventChannelFactory_ptr)_r->_ptrToObjRef(CosNotifyChannelAdmin::EventChannelFactory::_PD_repoId);
    else
      _o = CosNotifyChannelAdmin::EventChannelFactory::_nil();
    return 1;
  }
  return 0;
}

