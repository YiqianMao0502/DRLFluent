// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.

#include "CosNotifyFilter.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_2;



void
CosNotifyFilter::ConstraintExp::operator>>= (cdrStream &_n) const
{
  (const CosNotification::EventTypeSeq&) event_types >>= _n;
  _n.marshalString(constraint_expr,0);

}

void
CosNotifyFilter::ConstraintExp::operator<<= (cdrStream &_n)
{
  (CosNotification::EventTypeSeq&)event_types <<= _n;
  constraint_expr = _n.unmarshalString(0);

}

void
CosNotifyFilter::ConstraintInfo::operator>>= (cdrStream &_n) const
{
  (const ConstraintExp&) constraint_expression >>= _n;
  constraint_id >>= _n;

}

void
CosNotifyFilter::ConstraintInfo::operator<<= (cdrStream &_n)
{
  (ConstraintExp&)constraint_expression <<= _n;
  (ConstraintID&)constraint_id <<= _n;

}

void
CosNotifyFilter::MappingConstraintPair::operator>>= (cdrStream &_n) const
{
  (const ConstraintExp&) constraint_expression >>= _n;
  (const ::CORBA::Any&) result_to_set >>= _n;

}

void
CosNotifyFilter::MappingConstraintPair::operator<<= (cdrStream &_n)
{
  (ConstraintExp&)constraint_expression <<= _n;
  (::CORBA::Any&)result_to_set <<= _n;

}

void
CosNotifyFilter::MappingConstraintInfo::operator>>= (cdrStream &_n) const
{
  (const ConstraintExp&) constraint_expression >>= _n;
  constraint_id >>= _n;
  (const ::CORBA::Any&) value >>= _n;

}

void
CosNotifyFilter::MappingConstraintInfo::operator<<= (cdrStream &_n)
{
  (ConstraintExp&)constraint_expression <<= _n;
  (ConstraintID&)constraint_id <<= _n;
  (::CORBA::Any&)value <<= _n;

}

::CORBA::Exception::insertExceptionToAny CosNotifyFilter::UnsupportedFilterableData::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CosNotifyFilter::UnsupportedFilterableData::insertToAnyFnNCP = 0;

CosNotifyFilter::UnsupportedFilterableData::UnsupportedFilterableData(const CosNotifyFilter::UnsupportedFilterableData& _s) : ::CORBA::UserException(_s)
{
  
}



CosNotifyFilter::UnsupportedFilterableData& CosNotifyFilter::UnsupportedFilterableData::operator=(const CosNotifyFilter::UnsupportedFilterableData& _s)
{
  if (&_s != this) {
    ((::CORBA::UserException*) this)->operator=(_s);
    
  }
  return *this;
}

CosNotifyFilter::UnsupportedFilterableData::~UnsupportedFilterableData() {}

void CosNotifyFilter::UnsupportedFilterableData::_raise() const { throw *this; }

const char* CosNotifyFilter::UnsupportedFilterableData::_PD_repoId = "IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0";
const char* CosNotifyFilter::UnsupportedFilterableData::_PD_typeId = "Exception/UserException/CosNotifyFilter::UnsupportedFilterableData";

CosNotifyFilter::UnsupportedFilterableData* CosNotifyFilter::UnsupportedFilterableData::_downcast(::CORBA::Exception* _e) {
  return (UnsupportedFilterableData*) _NP_is_a(_e, _PD_typeId);
}

const CosNotifyFilter::UnsupportedFilterableData* CosNotifyFilter::UnsupportedFilterableData::_downcast(const ::CORBA::Exception* _e) {
  return (const UnsupportedFilterableData*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CosNotifyFilter::UnsupportedFilterableData::_NP_duplicate() const {
  return new UnsupportedFilterableData(*this);
}

const char* CosNotifyFilter::UnsupportedFilterableData::_NP_typeId() const {
  return _PD_typeId;
}

const char* CosNotifyFilter::UnsupportedFilterableData::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:omg.org/CosNotifyFilter/UnsupportedFilterableData:1.0");
  return _PD_repoId;
}
 
void CosNotifyFilter::UnsupportedFilterableData::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny CosNotifyFilter::InvalidGrammar::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CosNotifyFilter::InvalidGrammar::insertToAnyFnNCP = 0;

CosNotifyFilter::InvalidGrammar::InvalidGrammar(const CosNotifyFilter::InvalidGrammar& _s) : ::CORBA::UserException(_s)
{
  
}



CosNotifyFilter::InvalidGrammar& CosNotifyFilter::InvalidGrammar::operator=(const CosNotifyFilter::InvalidGrammar& _s)
{
  if (&_s != this) {
    ((::CORBA::UserException*) this)->operator=(_s);
    
  }
  return *this;
}

CosNotifyFilter::InvalidGrammar::~InvalidGrammar() {}

void CosNotifyFilter::InvalidGrammar::_raise() const { throw *this; }

const char* CosNotifyFilter::InvalidGrammar::_PD_repoId = "IDL:omg.org/CosNotifyFilter/InvalidGrammar:1.0";
const char* CosNotifyFilter::InvalidGrammar::_PD_typeId = "Exception/UserException/CosNotifyFilter::InvalidGrammar";

CosNotifyFilter::InvalidGrammar* CosNotifyFilter::InvalidGrammar::_downcast(::CORBA::Exception* _e) {
  return (InvalidGrammar*) _NP_is_a(_e, _PD_typeId);
}

const CosNotifyFilter::InvalidGrammar* CosNotifyFilter::InvalidGrammar::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidGrammar*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CosNotifyFilter::InvalidGrammar::_NP_duplicate() const {
  return new InvalidGrammar(*this);
}

const char* CosNotifyFilter::InvalidGrammar::_NP_typeId() const {
  return _PD_typeId;
}

const char* CosNotifyFilter::InvalidGrammar::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:omg.org/CosNotifyFilter/InvalidGrammar:1.0");
  return _PD_repoId;
}
 
void CosNotifyFilter::InvalidGrammar::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny CosNotifyFilter::InvalidConstraint::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CosNotifyFilter::InvalidConstraint::insertToAnyFnNCP = 0;

CosNotifyFilter::InvalidConstraint::InvalidConstraint(const CosNotifyFilter::InvalidConstraint& _s) : ::CORBA::UserException(_s)
{
  constr = _s.constr;

}

CosNotifyFilter::InvalidConstraint::InvalidConstraint(const ConstraintExp& _constr)
{
  pd_insertToAnyFn    = CosNotifyFilter::InvalidConstraint::insertToAnyFn;
  pd_insertToAnyFnNCP = CosNotifyFilter::InvalidConstraint::insertToAnyFnNCP;
  constr = _constr;

}



CosNotifyFilter::InvalidConstraint& CosNotifyFilter::InvalidConstraint::operator=(const CosNotifyFilter::InvalidConstraint& _s)
{
  if (&_s != this) {
    ((::CORBA::UserException*) this)->operator=(_s);
    constr = _s.constr;

  }
  return *this;
}

CosNotifyFilter::InvalidConstraint::~InvalidConstraint() {}

void CosNotifyFilter::InvalidConstraint::_raise() const { throw *this; }

const char* CosNotifyFilter::InvalidConstraint::_PD_repoId = "IDL:omg.org/CosNotifyFilter/InvalidConstraint:1.0";
const char* CosNotifyFilter::InvalidConstraint::_PD_typeId = "Exception/UserException/CosNotifyFilter::InvalidConstraint";

CosNotifyFilter::InvalidConstraint* CosNotifyFilter::InvalidConstraint::_downcast(::CORBA::Exception* _e) {
  return (InvalidConstraint*) _NP_is_a(_e, _PD_typeId);
}

const CosNotifyFilter::InvalidConstraint* CosNotifyFilter::InvalidConstraint::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidConstraint*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CosNotifyFilter::InvalidConstraint::_NP_duplicate() const {
  return new InvalidConstraint(*this);
}

const char* CosNotifyFilter::InvalidConstraint::_NP_typeId() const {
  return _PD_typeId;
}

const char* CosNotifyFilter::InvalidConstraint::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:omg.org/CosNotifyFilter/InvalidConstraint:1.0");
  return _PD_repoId;
}
 
void CosNotifyFilter::InvalidConstraint::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CosNotifyFilter::InvalidConstraint::operator>>= (cdrStream& _n) const
{
  (const ConstraintExp&) constr >>= _n;

}

void
CosNotifyFilter::InvalidConstraint::operator<<= (cdrStream& _n)
{
  (ConstraintExp&)constr <<= _n;

}

::CORBA::Exception::insertExceptionToAny CosNotifyFilter::DuplicateConstraintID::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CosNotifyFilter::DuplicateConstraintID::insertToAnyFnNCP = 0;

CosNotifyFilter::DuplicateConstraintID::DuplicateConstraintID(const CosNotifyFilter::DuplicateConstraintID& _s) : ::CORBA::UserException(_s)
{
  id = _s.id;

}

CosNotifyFilter::DuplicateConstraintID::DuplicateConstraintID(ConstraintID _id)
{
  pd_insertToAnyFn    = CosNotifyFilter::DuplicateConstraintID::insertToAnyFn;
  pd_insertToAnyFnNCP = CosNotifyFilter::DuplicateConstraintID::insertToAnyFnNCP;
  id = _id;

}



CosNotifyFilter::DuplicateConstraintID& CosNotifyFilter::DuplicateConstraintID::operator=(const CosNotifyFilter::DuplicateConstraintID& _s)
{
  if (&_s != this) {
    ((::CORBA::UserException*) this)->operator=(_s);
    id = _s.id;

  }
  return *this;
}

CosNotifyFilter::DuplicateConstraintID::~DuplicateConstraintID() {}

void CosNotifyFilter::DuplicateConstraintID::_raise() const { throw *this; }

const char* CosNotifyFilter::DuplicateConstraintID::_PD_repoId = "IDL:omg.org/CosNotifyFilter/DuplicateConstraintID:1.0";
const char* CosNotifyFilter::DuplicateConstraintID::_PD_typeId = "Exception/UserException/CosNotifyFilter::DuplicateConstraintID";

CosNotifyFilter::DuplicateConstraintID* CosNotifyFilter::DuplicateConstraintID::_downcast(::CORBA::Exception* _e) {
  return (DuplicateConstraintID*) _NP_is_a(_e, _PD_typeId);
}

const CosNotifyFilter::DuplicateConstraintID* CosNotifyFilter::DuplicateConstraintID::_downcast(const ::CORBA::Exception* _e) {
  return (const DuplicateConstraintID*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CosNotifyFilter::DuplicateConstraintID::_NP_duplicate() const {
  return new DuplicateConstraintID(*this);
}

const char* CosNotifyFilter::DuplicateConstraintID::_NP_typeId() const {
  return _PD_typeId;
}

const char* CosNotifyFilter::DuplicateConstraintID::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:omg.org/CosNotifyFilter/DuplicateConstraintID:1.0");
  return _PD_repoId;
}
 
void CosNotifyFilter::DuplicateConstraintID::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CosNotifyFilter::DuplicateConstraintID::operator>>= (cdrStream& _n) const
{
  id >>= _n;

}

void
CosNotifyFilter::DuplicateConstraintID::operator<<= (cdrStream& _n)
{
  (ConstraintID&)id <<= _n;

}

::CORBA::Exception::insertExceptionToAny CosNotifyFilter::ConstraintNotFound::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CosNotifyFilter::ConstraintNotFound::insertToAnyFnNCP = 0;

CosNotifyFilter::ConstraintNotFound::ConstraintNotFound(const CosNotifyFilter::ConstraintNotFound& _s) : ::CORBA::UserException(_s)
{
  id = _s.id;

}

CosNotifyFilter::ConstraintNotFound::ConstraintNotFound(ConstraintID _id)
{
  pd_insertToAnyFn    = CosNotifyFilter::ConstraintNotFound::insertToAnyFn;
  pd_insertToAnyFnNCP = CosNotifyFilter::ConstraintNotFound::insertToAnyFnNCP;
  id = _id;

}



CosNotifyFilter::ConstraintNotFound& CosNotifyFilter::ConstraintNotFound::operator=(const CosNotifyFilter::ConstraintNotFound& _s)
{
  if (&_s != this) {
    ((::CORBA::UserException*) this)->operator=(_s);
    id = _s.id;

  }
  return *this;
}

CosNotifyFilter::ConstraintNotFound::~ConstraintNotFound() {}

void CosNotifyFilter::ConstraintNotFound::_raise() const { throw *this; }

const char* CosNotifyFilter::ConstraintNotFound::_PD_repoId = "IDL:omg.org/CosNotifyFilter/ConstraintNotFound:1.0";
const char* CosNotifyFilter::ConstraintNotFound::_PD_typeId = "Exception/UserException/CosNotifyFilter::ConstraintNotFound";

CosNotifyFilter::ConstraintNotFound* CosNotifyFilter::ConstraintNotFound::_downcast(::CORBA::Exception* _e) {
  return (ConstraintNotFound*) _NP_is_a(_e, _PD_typeId);
}

const CosNotifyFilter::ConstraintNotFound* CosNotifyFilter::ConstraintNotFound::_downcast(const ::CORBA::Exception* _e) {
  return (const ConstraintNotFound*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CosNotifyFilter::ConstraintNotFound::_NP_duplicate() const {
  return new ConstraintNotFound(*this);
}

const char* CosNotifyFilter::ConstraintNotFound::_NP_typeId() const {
  return _PD_typeId;
}

const char* CosNotifyFilter::ConstraintNotFound::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:omg.org/CosNotifyFilter/ConstraintNotFound:1.0");
  return _PD_repoId;
}
 
void CosNotifyFilter::ConstraintNotFound::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CosNotifyFilter::ConstraintNotFound::operator>>= (cdrStream& _n) const
{
  id >>= _n;

}

void
CosNotifyFilter::ConstraintNotFound::operator<<= (cdrStream& _n)
{
  (ConstraintID&)id <<= _n;

}

::CORBA::Exception::insertExceptionToAny CosNotifyFilter::CallbackNotFound::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CosNotifyFilter::CallbackNotFound::insertToAnyFnNCP = 0;

CosNotifyFilter::CallbackNotFound::CallbackNotFound(const CosNotifyFilter::CallbackNotFound& _s) : ::CORBA::UserException(_s)
{
  
}



CosNotifyFilter::CallbackNotFound& CosNotifyFilter::CallbackNotFound::operator=(const CosNotifyFilter::CallbackNotFound& _s)
{
  if (&_s != this) {
    ((::CORBA::UserException*) this)->operator=(_s);
    
  }
  return *this;
}

CosNotifyFilter::CallbackNotFound::~CallbackNotFound() {}

void CosNotifyFilter::CallbackNotFound::_raise() const { throw *this; }

const char* CosNotifyFilter::CallbackNotFound::_PD_repoId = "IDL:omg.org/CosNotifyFilter/CallbackNotFound:1.0";
const char* CosNotifyFilter::CallbackNotFound::_PD_typeId = "Exception/UserException/CosNotifyFilter::CallbackNotFound";

CosNotifyFilter::CallbackNotFound* CosNotifyFilter::CallbackNotFound::_downcast(::CORBA::Exception* _e) {
  return (CallbackNotFound*) _NP_is_a(_e, _PD_typeId);
}

const CosNotifyFilter::CallbackNotFound* CosNotifyFilter::CallbackNotFound::_downcast(const ::CORBA::Exception* _e) {
  return (const CallbackNotFound*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CosNotifyFilter::CallbackNotFound::_NP_duplicate() const {
  return new CallbackNotFound(*this);
}

const char* CosNotifyFilter::CallbackNotFound::_NP_typeId() const {
  return _PD_typeId;
}

const char* CosNotifyFilter::CallbackNotFound::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:omg.org/CosNotifyFilter/CallbackNotFound:1.0");
  return _PD_repoId;
}
 
void CosNotifyFilter::CallbackNotFound::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny CosNotifyFilter::InvalidValue::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CosNotifyFilter::InvalidValue::insertToAnyFnNCP = 0;

CosNotifyFilter::InvalidValue::InvalidValue(const CosNotifyFilter::InvalidValue& _s) : ::CORBA::UserException(_s)
{
  constr = _s.constr;
  value = _s.value;

}

CosNotifyFilter::InvalidValue::InvalidValue(const ConstraintExp& _constr, const ::CORBA::Any& _value)
{
  pd_insertToAnyFn    = CosNotifyFilter::InvalidValue::insertToAnyFn;
  pd_insertToAnyFnNCP = CosNotifyFilter::InvalidValue::insertToAnyFnNCP;
  constr = _constr;
  value = _value;

}



CosNotifyFilter::InvalidValue& CosNotifyFilter::InvalidValue::operator=(const CosNotifyFilter::InvalidValue& _s)
{
  if (&_s != this) {
    ((::CORBA::UserException*) this)->operator=(_s);
    constr = _s.constr;
    value = _s.value;

  }
  return *this;
}

CosNotifyFilter::InvalidValue::~InvalidValue() {}

void CosNotifyFilter::InvalidValue::_raise() const { throw *this; }

const char* CosNotifyFilter::InvalidValue::_PD_repoId = "IDL:omg.org/CosNotifyFilter/InvalidValue:1.0";
const char* CosNotifyFilter::InvalidValue::_PD_typeId = "Exception/UserException/CosNotifyFilter::InvalidValue";

CosNotifyFilter::InvalidValue* CosNotifyFilter::InvalidValue::_downcast(::CORBA::Exception* _e) {
  return (InvalidValue*) _NP_is_a(_e, _PD_typeId);
}

const CosNotifyFilter::InvalidValue* CosNotifyFilter::InvalidValue::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidValue*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CosNotifyFilter::InvalidValue::_NP_duplicate() const {
  return new InvalidValue(*this);
}

const char* CosNotifyFilter::InvalidValue::_NP_typeId() const {
  return _PD_typeId;
}

const char* CosNotifyFilter::InvalidValue::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:omg.org/CosNotifyFilter/InvalidValue:1.0");
  return _PD_repoId;
}
 
void CosNotifyFilter::InvalidValue::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CosNotifyFilter::InvalidValue::operator>>= (cdrStream& _n) const
{
  (const ConstraintExp&) constr >>= _n;
  (const ::CORBA::Any&) value >>= _n;

}

void
CosNotifyFilter::InvalidValue::operator<<= (cdrStream& _n)
{
  (ConstraintExp&)constr <<= _n;
  (::CORBA::Any&)value <<= _n;

}

CosNotifyFilter::Filter_ptr CosNotifyFilter::Filter_Helper::_nil() {
  return ::CosNotifyFilter::Filter::_nil();
}

::CORBA::Boolean CosNotifyFilter::Filter_Helper::is_nil(::CosNotifyFilter::Filter_ptr p) {
  return ::CORBA::is_nil(p);

}

void CosNotifyFilter::Filter_Helper::release(::CosNotifyFilter::Filter_ptr p) {
  ::CORBA::release(p);
}

void CosNotifyFilter::Filter_Helper::marshalObjRef(::CosNotifyFilter::Filter_ptr obj, cdrStream& s) {
  ::CosNotifyFilter::Filter::_marshalObjRef(obj, s);
}

CosNotifyFilter::Filter_ptr CosNotifyFilter::Filter_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CosNotifyFilter::Filter::_unmarshalObjRef(s);
}

void CosNotifyFilter::Filter_Helper::duplicate(::CosNotifyFilter::Filter_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

CosNotifyFilter::Filter_ptr
CosNotifyFilter::Filter::_duplicate(::CosNotifyFilter::Filter_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

CosNotifyFilter::Filter_ptr
CosNotifyFilter::Filter::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CosNotifyFilter::Filter_ptr
CosNotifyFilter::Filter::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CosNotifyFilter::Filter_ptr
CosNotifyFilter::Filter::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Filter _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Filter* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_Filter;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CosNotifyFilter::Filter::_PD_repoId = "IDL:omg.org/CosNotifyFilter/Filter:1.0";


CosNotifyFilter::_objref_Filter::~_objref_Filter() {
  
}


CosNotifyFilter::_objref_Filter::_objref_Filter(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CosNotifyFilter::Filter::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
CosNotifyFilter::_objref_Filter::_ptrToObjRef(const char* id)
{
  if (id == ::CosNotifyFilter::Filter::_PD_repoId)
    return (::CosNotifyFilter::Filter_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::CosNotifyFilter::Filter::_PD_repoId))
    return (::CosNotifyFilter::Filter_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for CosNotifyFilter::Filter::_get_constraint_grammar

// Proxy call descriptor class. Mangled signature:
//  _cstring
class _0RL_cd_1fe8f330207afd15_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var result;
};

void _0RL_cd_1fe8f330207afd15_00000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_1fe8f330207afd15_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

const char* const _0RL_cd_1fe8f330207afd15_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_00000000* tcd = (_0RL_cd_1fe8f330207afd15_00000000*)cd;
  CosNotifyFilter::_impl_Filter* impl = (CosNotifyFilter::_impl_Filter*) svnt->_ptrToInterface(CosNotifyFilter::Filter::_PD_repoId);
  tcd->result = impl->constraint_grammar();


}

char* CosNotifyFilter::_objref_Filter::constraint_grammar()
{
  _0RL_cd_1fe8f330207afd15_00000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_10000000, "_get_constraint_grammar", 24);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for CosNotifyFilter::Filter::add_constraints

// Proxy call descriptor class. Mangled signature:
//  _cCosNotifyFilter_mConstraintInfoSeq_i_cCosNotifyFilter_mConstraintExpSeq_e_cCosNotifyFilter_mInvalidConstraint
class _0RL_cd_1fe8f330207afd15_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_20000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  CosNotifyFilter::ConstraintExpSeq_var arg_0_;
  const CosNotifyFilter::ConstraintExpSeq* arg_0;
  CosNotifyFilter::ConstraintInfoSeq_var result;
};

void _0RL_cd_1fe8f330207afd15_20000000::marshalArguments(cdrStream& _n)
{
  (const CosNotifyFilter::ConstraintExpSeq&) *arg_0 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CosNotifyFilter::ConstraintExpSeq;
  (CosNotifyFilter::ConstraintExpSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_1fe8f330207afd15_20000000::marshalReturnedValues(cdrStream& _n)
{
  (const CosNotifyFilter::ConstraintInfoSeq&) result >>= _n;

}

void _0RL_cd_1fe8f330207afd15_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CosNotifyFilter::ConstraintInfoSeq;
  (CosNotifyFilter::ConstraintInfoSeq&)result <<= _n;

}

const char* const _0RL_cd_1fe8f330207afd15_20000000::_user_exns[] = {
  CosNotifyFilter::InvalidConstraint::_PD_repoId
};

void _0RL_cd_1fe8f330207afd15_20000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, CosNotifyFilter::InvalidConstraint::_PD_repoId)) {
    CosNotifyFilter::InvalidConstraint _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_20000000* tcd = (_0RL_cd_1fe8f330207afd15_20000000*)cd;
  CosNotifyFilter::_impl_Filter* impl = (CosNotifyFilter::_impl_Filter*) svnt->_ptrToInterface(CosNotifyFilter::Filter::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->add_constraints(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->add_constraints(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->add_constraints(*tcd->arg_0);
    }
    catch(CosNotifyFilter::InvalidConstraint& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

CosNotifyFilter::ConstraintInfoSeq* CosNotifyFilter::_objref_Filter::add_constraints(const ::CosNotifyFilter::ConstraintExpSeq& constraint_list)
{
  _0RL_cd_1fe8f330207afd15_20000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_30000000, "add_constraints", 16);
  _call_desc.arg_0 = &(::CosNotifyFilter::ConstraintExpSeq&) constraint_list;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for CosNotifyFilter::Filter::modify_constraints

// Proxy call descriptor class. Mangled signature:
//  void_i_cCosNotifyFilter_mConstraintIDSeq_i_cCosNotifyFilter_mConstraintInfoSeq_e_cCosNotifyFilter_mConstraintNotFound_e_cCosNotifyFilter_mInvalidConstraint
class _0RL_cd_1fe8f330207afd15_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_40000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  CosNotifyFilter::ConstraintIDSeq_var arg_0_;
  const CosNotifyFilter::ConstraintIDSeq* arg_0;
  CosNotifyFilter::ConstraintInfoSeq_var arg_1_;
  const CosNotifyFilter::ConstraintInfoSeq* arg_1;
};

void _0RL_cd_1fe8f330207afd15_40000000::marshalArguments(cdrStream& _n)
{
  (const CosNotifyFilter::ConstraintIDSeq&) *arg_0 >>= _n;
  (const CosNotifyFilter::ConstraintInfoSeq&) *arg_1 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CosNotifyFilter::ConstraintIDSeq;
  (CosNotifyFilter::ConstraintIDSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new CosNotifyFilter::ConstraintInfoSeq;
  (CosNotifyFilter::ConstraintInfoSeq&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_1fe8f330207afd15_40000000::_user_exns[] = {
  CosNotifyFilter::ConstraintNotFound::_PD_repoId,
  CosNotifyFilter::InvalidConstraint::_PD_repoId
};

void _0RL_cd_1fe8f330207afd15_40000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, CosNotifyFilter::ConstraintNotFound::_PD_repoId)) {
    CosNotifyFilter::ConstraintNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if (omni::strMatch(repoId, CosNotifyFilter::InvalidConstraint::_PD_repoId)) {
    CosNotifyFilter::InvalidConstraint _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_40000000* tcd = (_0RL_cd_1fe8f330207afd15_40000000*)cd;
  CosNotifyFilter::_impl_Filter* impl = (CosNotifyFilter::_impl_Filter*) svnt->_ptrToInterface(CosNotifyFilter::Filter::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->modify_constraints(*tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->modify_constraints(*tcd->arg_0, *tcd->arg_1);
  else {
    try {
      impl->modify_constraints(*tcd->arg_0, *tcd->arg_1);
    }
    catch(CosNotifyFilter::InvalidConstraint& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CosNotifyFilter::ConstraintNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CosNotifyFilter::_objref_Filter::modify_constraints(const ::CosNotifyFilter::ConstraintIDSeq& del_list, const ::CosNotifyFilter::ConstraintInfoSeq& modify_list)
{
  _0RL_cd_1fe8f330207afd15_40000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_50000000, "modify_constraints", 19);
  _call_desc.arg_0 = &(::CosNotifyFilter::ConstraintIDSeq&) del_list;
  _call_desc.arg_1 = &(::CosNotifyFilter::ConstraintInfoSeq&) modify_list;

  _invoke(_call_desc);



}


//
// Code for CosNotifyFilter::Filter::get_constraints

// Proxy call descriptor class. Mangled signature:
//  _cCosNotifyFilter_mConstraintInfoSeq_i_cCosNotifyFilter_mConstraintIDSeq_e_cCosNotifyFilter_mConstraintNotFound
class _0RL_cd_1fe8f330207afd15_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_60000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  CosNotifyFilter::ConstraintIDSeq_var arg_0_;
  const CosNotifyFilter::ConstraintIDSeq* arg_0;
  CosNotifyFilter::ConstraintInfoSeq_var result;
};

void _0RL_cd_1fe8f330207afd15_60000000::marshalArguments(cdrStream& _n)
{
  (const CosNotifyFilter::ConstraintIDSeq&) *arg_0 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_60000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CosNotifyFilter::ConstraintIDSeq;
  (CosNotifyFilter::ConstraintIDSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_1fe8f330207afd15_60000000::marshalReturnedValues(cdrStream& _n)
{
  (const CosNotifyFilter::ConstraintInfoSeq&) result >>= _n;

}

void _0RL_cd_1fe8f330207afd15_60000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CosNotifyFilter::ConstraintInfoSeq;
  (CosNotifyFilter::ConstraintInfoSeq&)result <<= _n;

}

const char* const _0RL_cd_1fe8f330207afd15_60000000::_user_exns[] = {
  CosNotifyFilter::ConstraintNotFound::_PD_repoId
};

void _0RL_cd_1fe8f330207afd15_60000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, CosNotifyFilter::ConstraintNotFound::_PD_repoId)) {
    CosNotifyFilter::ConstraintNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_60000000* tcd = (_0RL_cd_1fe8f330207afd15_60000000*)cd;
  CosNotifyFilter::_impl_Filter* impl = (CosNotifyFilter::_impl_Filter*) svnt->_ptrToInterface(CosNotifyFilter::Filter::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_constraints(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_constraints(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->get_constraints(*tcd->arg_0);
    }
    catch(CosNotifyFilter::ConstraintNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

CosNotifyFilter::ConstraintInfoSeq* CosNotifyFilter::_objref_Filter::get_constraints(const ::CosNotifyFilter::ConstraintIDSeq& id_list)
{
  _0RL_cd_1fe8f330207afd15_60000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_70000000, "get_constraints", 16);
  _call_desc.arg_0 = &(::CosNotifyFilter::ConstraintIDSeq&) id_list;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for CosNotifyFilter::Filter::get_all_constraints

// Proxy call descriptor class. Mangled signature:
//  _cCosNotifyFilter_mConstraintInfoSeq
class _0RL_cd_1fe8f330207afd15_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_80000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  CosNotifyFilter::ConstraintInfoSeq_var result;
};

void _0RL_cd_1fe8f330207afd15_80000000::marshalReturnedValues(cdrStream& _n)
{
  (const CosNotifyFilter::ConstraintInfoSeq&) result >>= _n;

}

void _0RL_cd_1fe8f330207afd15_80000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CosNotifyFilter::ConstraintInfoSeq;
  (CosNotifyFilter::ConstraintInfoSeq&)result <<= _n;

}

const char* const _0RL_cd_1fe8f330207afd15_80000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_80000000* tcd = (_0RL_cd_1fe8f330207afd15_80000000*)cd;
  CosNotifyFilter::_impl_Filter* impl = (CosNotifyFilter::_impl_Filter*) svnt->_ptrToInterface(CosNotifyFilter::Filter::_PD_repoId);
  tcd->result = impl->get_all_constraints();


}

CosNotifyFilter::ConstraintInfoSeq* CosNotifyFilter::_objref_Filter::get_all_constraints()
{
  _0RL_cd_1fe8f330207afd15_80000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_90000000, "get_all_constraints", 20);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for CosNotifyFilter::Filter::remove_all_constraints

// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_1fe8f330207afd15_a0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_a0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
    
  
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_1fe8f330207afd15_a0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_b0000000(omniCallDescriptor*, omniServant* svnt)
{
  
  CosNotifyFilter::_impl_Filter* impl = (CosNotifyFilter::_impl_Filter*) svnt->_ptrToInterface(CosNotifyFilter::Filter::_PD_repoId);
  impl->remove_all_constraints();


}

void CosNotifyFilter::_objref_Filter::remove_all_constraints()
{
  _0RL_cd_1fe8f330207afd15_a0000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_b0000000, "remove_all_constraints", 23);


  _invoke(_call_desc);



}


//
// Code for CosNotifyFilter::Filter::destroy

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_c0000000(omniCallDescriptor*, omniServant* svnt)
{
  
  CosNotifyFilter::_impl_Filter* impl = (CosNotifyFilter::_impl_Filter*) svnt->_ptrToInterface(CosNotifyFilter::Filter::_PD_repoId);
  impl->destroy();


}

void CosNotifyFilter::_objref_Filter::destroy()
{
  _0RL_cd_1fe8f330207afd15_a0000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_c0000000, "destroy", 8);


  _invoke(_call_desc);



}


//
// Code for CosNotifyFilter::Filter::match

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cany_e_cCosNotifyFilter_mUnsupportedFilterableData
class _0RL_cd_1fe8f330207afd15_d0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_d0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::Any_var arg_0_;
  const ::CORBA::Any* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_1fe8f330207afd15_d0000000::marshalArguments(cdrStream& _n)
{
  (const ::CORBA::Any&) *arg_0 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_d0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new ::CORBA::Any;
  (::CORBA::Any&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_1fe8f330207afd15_d0000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_1fe8f330207afd15_d0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_1fe8f330207afd15_d0000000::_user_exns[] = {
  CosNotifyFilter::UnsupportedFilterableData::_PD_repoId
};

void _0RL_cd_1fe8f330207afd15_d0000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, CosNotifyFilter::UnsupportedFilterableData::_PD_repoId)) {
    CosNotifyFilter::UnsupportedFilterableData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_d0000000* tcd = (_0RL_cd_1fe8f330207afd15_d0000000*)cd;
  CosNotifyFilter::_impl_Filter* impl = (CosNotifyFilter::_impl_Filter*) svnt->_ptrToInterface(CosNotifyFilter::Filter::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->match(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->match(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->match(*tcd->arg_0);
    }
    catch(CosNotifyFilter::UnsupportedFilterableData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean CosNotifyFilter::_objref_Filter::match(const ::CORBA::Any& filterable_data)
{
  _0RL_cd_1fe8f330207afd15_d0000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_e0000000, "match", 6);
  _call_desc.arg_0 = &(::CORBA::Any&) filterable_data;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for CosNotifyFilter::Filter::match_structured

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cCosNotification_mStructuredEvent_e_cCosNotifyFilter_mUnsupportedFilterableData
class _0RL_cd_1fe8f330207afd15_f0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_f0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  CosNotification::StructuredEvent_var arg_0_;
  const CosNotification::StructuredEvent* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_1fe8f330207afd15_f0000000::marshalArguments(cdrStream& _n)
{
  (const CosNotification::StructuredEvent&) *arg_0 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_f0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CosNotification::StructuredEvent;
  (CosNotification::StructuredEvent&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_1fe8f330207afd15_f0000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_1fe8f330207afd15_f0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_1fe8f330207afd15_f0000000::_user_exns[] = {
  CosNotifyFilter::UnsupportedFilterableData::_PD_repoId
};

void _0RL_cd_1fe8f330207afd15_f0000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, CosNotifyFilter::UnsupportedFilterableData::_PD_repoId)) {
    CosNotifyFilter::UnsupportedFilterableData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_01000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_f0000000* tcd = (_0RL_cd_1fe8f330207afd15_f0000000*)cd;
  CosNotifyFilter::_impl_Filter* impl = (CosNotifyFilter::_impl_Filter*) svnt->_ptrToInterface(CosNotifyFilter::Filter::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->match_structured(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->match_structured(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->match_structured(*tcd->arg_0);
    }
    catch(CosNotifyFilter::UnsupportedFilterableData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean CosNotifyFilter::_objref_Filter::match_structured(const ::CosNotification::StructuredEvent& filterable_data)
{
  _0RL_cd_1fe8f330207afd15_f0000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_01000000, "match_structured", 17);
  _call_desc.arg_0 = &(::CosNotification::StructuredEvent&) filterable_data;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for CosNotifyFilter::Filter::match_typed

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cCosNotification_mPropertySeq_e_cCosNotifyFilter_mUnsupportedFilterableData
class _0RL_cd_1fe8f330207afd15_11000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_11000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  CosNotification::PropertySeq_var arg_0_;
  const CosNotification::PropertySeq* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_1fe8f330207afd15_11000000::marshalArguments(cdrStream& _n)
{
  (const CosNotification::PropertySeq&) *arg_0 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_11000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CosNotification::PropertySeq;
  (CosNotification::PropertySeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_1fe8f330207afd15_11000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_1fe8f330207afd15_11000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_1fe8f330207afd15_11000000::_user_exns[] = {
  CosNotifyFilter::UnsupportedFilterableData::_PD_repoId
};

void _0RL_cd_1fe8f330207afd15_11000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, CosNotifyFilter::UnsupportedFilterableData::_PD_repoId)) {
    CosNotifyFilter::UnsupportedFilterableData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_21000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_11000000* tcd = (_0RL_cd_1fe8f330207afd15_11000000*)cd;
  CosNotifyFilter::_impl_Filter* impl = (CosNotifyFilter::_impl_Filter*) svnt->_ptrToInterface(CosNotifyFilter::Filter::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->match_typed(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->match_typed(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->match_typed(*tcd->arg_0);
    }
    catch(CosNotifyFilter::UnsupportedFilterableData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean CosNotifyFilter::_objref_Filter::match_typed(const ::CosNotification::PropertySeq& filterable_data)
{
  _0RL_cd_1fe8f330207afd15_11000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_21000000, "match_typed", 12);
  _call_desc.arg_0 = &(::CosNotification::PropertySeq&) filterable_data;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for CosNotifyFilter::Filter::attach_callback

// Proxy call descriptor class. Mangled signature:
//  _clong_i_cCosNotifyComm_mNotifySubscribe
class _0RL_cd_1fe8f330207afd15_31000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_31000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  CosNotifyComm::NotifySubscribe_var arg_0_;
  CosNotifyComm::NotifySubscribe_ptr arg_0;
  CosNotifyFilter::CallbackID result;
};

void _0RL_cd_1fe8f330207afd15_31000000::marshalArguments(cdrStream& _n)
{
  CosNotifyComm::NotifySubscribe::_marshalObjRef(arg_0,_n);

}

void _0RL_cd_1fe8f330207afd15_31000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = CosNotifyComm::NotifySubscribe::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

void _0RL_cd_1fe8f330207afd15_31000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_1fe8f330207afd15_31000000::unmarshalReturnedValues(cdrStream& _n)
{
  (CosNotifyFilter::CallbackID&)result <<= _n;

}

const char* const _0RL_cd_1fe8f330207afd15_31000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_41000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_31000000* tcd = (_0RL_cd_1fe8f330207afd15_31000000*)cd;
  CosNotifyFilter::_impl_Filter* impl = (CosNotifyFilter::_impl_Filter*) svnt->_ptrToInterface(CosNotifyFilter::Filter::_PD_repoId);
  tcd->result = impl->attach_callback(tcd->arg_0);


}

CosNotifyFilter::CallbackID CosNotifyFilter::_objref_Filter::attach_callback(::CosNotifyComm::NotifySubscribe_ptr callback)
{
  _0RL_cd_1fe8f330207afd15_31000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_41000000, "attach_callback", 16);
  _call_desc.arg_0 = callback;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for CosNotifyFilter::Filter::detach_callback

// Proxy call descriptor class. Mangled signature:
//  void_i_clong_e_cCosNotifyFilter_mCallbackNotFound
class _0RL_cd_1fe8f330207afd15_51000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_51000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  CosNotifyFilter::CallbackID arg_0;
};

void _0RL_cd_1fe8f330207afd15_51000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_51000000::unmarshalArguments(cdrStream& _n)
{
  (CosNotifyFilter::CallbackID&)arg_0 <<= _n;

}

const char* const _0RL_cd_1fe8f330207afd15_51000000::_user_exns[] = {
  CosNotifyFilter::CallbackNotFound::_PD_repoId
};

void _0RL_cd_1fe8f330207afd15_51000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, CosNotifyFilter::CallbackNotFound::_PD_repoId)) {
    CosNotifyFilter::CallbackNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_61000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_51000000* tcd = (_0RL_cd_1fe8f330207afd15_51000000*)cd;
  CosNotifyFilter::_impl_Filter* impl = (CosNotifyFilter::_impl_Filter*) svnt->_ptrToInterface(CosNotifyFilter::Filter::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->detach_callback(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->detach_callback(tcd->arg_0);
  else {
    try {
      impl->detach_callback(tcd->arg_0);
    }
    catch(CosNotifyFilter::CallbackNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CosNotifyFilter::_objref_Filter::detach_callback(::CosNotifyFilter::CallbackID callback)
{
  _0RL_cd_1fe8f330207afd15_51000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_61000000, "detach_callback", 16);
  _call_desc.arg_0 = callback;

  _invoke(_call_desc);



}


//
// Code for CosNotifyFilter::Filter::get_callbacks

// Proxy call descriptor class. Mangled signature:
//  _cCosNotifyFilter_mCallbackIDSeq
class _0RL_cd_1fe8f330207afd15_71000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_71000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  CosNotifyFilter::CallbackIDSeq_var result;
};

void _0RL_cd_1fe8f330207afd15_71000000::marshalReturnedValues(cdrStream& _n)
{
  (const CosNotifyFilter::CallbackIDSeq&) result >>= _n;

}

void _0RL_cd_1fe8f330207afd15_71000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CosNotifyFilter::CallbackIDSeq;
  (CosNotifyFilter::CallbackIDSeq&)result <<= _n;

}

const char* const _0RL_cd_1fe8f330207afd15_71000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_81000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_71000000* tcd = (_0RL_cd_1fe8f330207afd15_71000000*)cd;
  CosNotifyFilter::_impl_Filter* impl = (CosNotifyFilter::_impl_Filter*) svnt->_ptrToInterface(CosNotifyFilter::Filter::_PD_repoId);
  tcd->result = impl->get_callbacks();


}

CosNotifyFilter::CallbackIDSeq* CosNotifyFilter::_objref_Filter::get_callbacks()
{
  _0RL_cd_1fe8f330207afd15_71000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_81000000, "get_callbacks", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}

CosNotifyFilter::_pof_Filter::~_pof_Filter() {}


omniObjRef*
CosNotifyFilter::_pof_Filter::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CosNotifyFilter::_objref_Filter(ior, id);
}


::CORBA::Boolean
CosNotifyFilter::_pof_Filter::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::CosNotifyFilter::Filter::_PD_repoId))
    return 1;
  
  return 0;
}

const CosNotifyFilter::_pof_Filter _the_pof_CosNotifyFilter_mFilter;

CosNotifyFilter::_impl_Filter::~_impl_Filter() {}


::CORBA::Boolean
CosNotifyFilter::_impl_Filter::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "_get_constraint_grammar")) {

    _0RL_cd_1fe8f330207afd15_00000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_10000000, "_get_constraint_grammar", 24, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "add_constraints")) {

    _0RL_cd_1fe8f330207afd15_20000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_30000000, "add_constraints", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "modify_constraints")) {

    _0RL_cd_1fe8f330207afd15_40000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_50000000, "modify_constraints", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "get_constraints")) {

    _0RL_cd_1fe8f330207afd15_60000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_70000000, "get_constraints", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "get_all_constraints")) {

    _0RL_cd_1fe8f330207afd15_80000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_90000000, "get_all_constraints", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "remove_all_constraints")) {

    _0RL_cd_1fe8f330207afd15_a0000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_b0000000, "remove_all_constraints", 23, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "destroy")) {

    _0RL_cd_1fe8f330207afd15_a0000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_c0000000, "destroy", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "match")) {

    _0RL_cd_1fe8f330207afd15_d0000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_e0000000, "match", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "match_structured")) {

    _0RL_cd_1fe8f330207afd15_f0000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_01000000, "match_structured", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "match_typed")) {

    _0RL_cd_1fe8f330207afd15_11000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_21000000, "match_typed", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "attach_callback")) {

    _0RL_cd_1fe8f330207afd15_31000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_41000000, "attach_callback", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "detach_callback")) {

    _0RL_cd_1fe8f330207afd15_51000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_61000000, "detach_callback", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "get_callbacks")) {

    _0RL_cd_1fe8f330207afd15_71000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_81000000, "get_callbacks", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
CosNotifyFilter::_impl_Filter::_ptrToInterface(const char* id)
{
  if (id == ::CosNotifyFilter::Filter::_PD_repoId)
    return (::CosNotifyFilter::_impl_Filter*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::CosNotifyFilter::Filter::_PD_repoId))
    return (::CosNotifyFilter::_impl_Filter*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
CosNotifyFilter::_impl_Filter::_mostDerivedRepoId()
{
  return ::CosNotifyFilter::Filter::_PD_repoId;
}

CosNotifyFilter::MappingFilter_ptr CosNotifyFilter::MappingFilter_Helper::_nil() {
  return ::CosNotifyFilter::MappingFilter::_nil();
}

::CORBA::Boolean CosNotifyFilter::MappingFilter_Helper::is_nil(::CosNotifyFilter::MappingFilter_ptr p) {
  return ::CORBA::is_nil(p);

}

void CosNotifyFilter::MappingFilter_Helper::release(::CosNotifyFilter::MappingFilter_ptr p) {
  ::CORBA::release(p);
}

void CosNotifyFilter::MappingFilter_Helper::marshalObjRef(::CosNotifyFilter::MappingFilter_ptr obj, cdrStream& s) {
  ::CosNotifyFilter::MappingFilter::_marshalObjRef(obj, s);
}

CosNotifyFilter::MappingFilter_ptr CosNotifyFilter::MappingFilter_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CosNotifyFilter::MappingFilter::_unmarshalObjRef(s);
}

void CosNotifyFilter::MappingFilter_Helper::duplicate(::CosNotifyFilter::MappingFilter_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

CosNotifyFilter::MappingFilter_ptr
CosNotifyFilter::MappingFilter::_duplicate(::CosNotifyFilter::MappingFilter_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

CosNotifyFilter::MappingFilter_ptr
CosNotifyFilter::MappingFilter::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CosNotifyFilter::MappingFilter_ptr
CosNotifyFilter::MappingFilter::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CosNotifyFilter::MappingFilter_ptr
CosNotifyFilter::MappingFilter::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_MappingFilter _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_MappingFilter* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_MappingFilter;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CosNotifyFilter::MappingFilter::_PD_repoId = "IDL:omg.org/CosNotifyFilter/MappingFilter:1.0";


CosNotifyFilter::_objref_MappingFilter::~_objref_MappingFilter() {
  
}


CosNotifyFilter::_objref_MappingFilter::_objref_MappingFilter(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CosNotifyFilter::MappingFilter::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
CosNotifyFilter::_objref_MappingFilter::_ptrToObjRef(const char* id)
{
  if (id == ::CosNotifyFilter::MappingFilter::_PD_repoId)
    return (::CosNotifyFilter::MappingFilter_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::CosNotifyFilter::MappingFilter::_PD_repoId))
    return (::CosNotifyFilter::MappingFilter_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for CosNotifyFilter::MappingFilter::_get_constraint_grammar

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_91000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_00000000* tcd = (_0RL_cd_1fe8f330207afd15_00000000*)cd;
  CosNotifyFilter::_impl_MappingFilter* impl = (CosNotifyFilter::_impl_MappingFilter*) svnt->_ptrToInterface(CosNotifyFilter::MappingFilter::_PD_repoId);
  tcd->result = impl->constraint_grammar();


}

char* CosNotifyFilter::_objref_MappingFilter::constraint_grammar()
{
  _0RL_cd_1fe8f330207afd15_00000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_91000000, "_get_constraint_grammar", 24);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for CosNotifyFilter::MappingFilter::_get_value_type

// Proxy call descriptor class. Mangled signature:
//  _cTypeCode
class _0RL_cd_1fe8f330207afd15_a1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_a1000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::TypeCode_var result;
};

void _0RL_cd_1fe8f330207afd15_a1000000::marshalReturnedValues(cdrStream& _n)
{
  ::CORBA::TypeCode::marshalTypeCode(result,_n);

}

void _0RL_cd_1fe8f330207afd15_a1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = ::CORBA::TypeCode::unmarshalTypeCode(_n);

}

const char* const _0RL_cd_1fe8f330207afd15_a1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_b1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_a1000000* tcd = (_0RL_cd_1fe8f330207afd15_a1000000*)cd;
  CosNotifyFilter::_impl_MappingFilter* impl = (CosNotifyFilter::_impl_MappingFilter*) svnt->_ptrToInterface(CosNotifyFilter::MappingFilter::_PD_repoId);
  tcd->result = impl->value_type();


}

::CORBA::TypeCode_ptr CosNotifyFilter::_objref_MappingFilter::value_type()
{
  _0RL_cd_1fe8f330207afd15_a1000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_b1000000, "_get_value_type", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for CosNotifyFilter::MappingFilter::_get_default_value

// Proxy call descriptor class. Mangled signature:
//  _cany
class _0RL_cd_1fe8f330207afd15_c1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_c1000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Any_var result;
};

void _0RL_cd_1fe8f330207afd15_c1000000::marshalReturnedValues(cdrStream& _n)
{
  (const ::CORBA::Any&) result >>= _n;

}

void _0RL_cd_1fe8f330207afd15_c1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ::CORBA::Any;
  (::CORBA::Any&)result <<= _n;

}

const char* const _0RL_cd_1fe8f330207afd15_c1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_d1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_c1000000* tcd = (_0RL_cd_1fe8f330207afd15_c1000000*)cd;
  CosNotifyFilter::_impl_MappingFilter* impl = (CosNotifyFilter::_impl_MappingFilter*) svnt->_ptrToInterface(CosNotifyFilter::MappingFilter::_PD_repoId);
  tcd->result = impl->default_value();


}

::CORBA::Any* CosNotifyFilter::_objref_MappingFilter::default_value()
{
  _0RL_cd_1fe8f330207afd15_c1000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_d1000000, "_get_default_value", 19);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for CosNotifyFilter::MappingFilter::add_mapping_constraints

// Proxy call descriptor class. Mangled signature:
//  _cCosNotifyFilter_mMappingConstraintInfoSeq_i_cCosNotifyFilter_mMappingConstraintPairSeq_e_cCosNotifyFilter_mInvalidConstraint_e_cCosNotifyFilter_mInvalidValue
class _0RL_cd_1fe8f330207afd15_e1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_e1000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  CosNotifyFilter::MappingConstraintPairSeq_var arg_0_;
  const CosNotifyFilter::MappingConstraintPairSeq* arg_0;
  CosNotifyFilter::MappingConstraintInfoSeq_var result;
};

void _0RL_cd_1fe8f330207afd15_e1000000::marshalArguments(cdrStream& _n)
{
  (const CosNotifyFilter::MappingConstraintPairSeq&) *arg_0 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_e1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CosNotifyFilter::MappingConstraintPairSeq;
  (CosNotifyFilter::MappingConstraintPairSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_1fe8f330207afd15_e1000000::marshalReturnedValues(cdrStream& _n)
{
  (const CosNotifyFilter::MappingConstraintInfoSeq&) result >>= _n;

}

void _0RL_cd_1fe8f330207afd15_e1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CosNotifyFilter::MappingConstraintInfoSeq;
  (CosNotifyFilter::MappingConstraintInfoSeq&)result <<= _n;

}

const char* const _0RL_cd_1fe8f330207afd15_e1000000::_user_exns[] = {
  CosNotifyFilter::InvalidConstraint::_PD_repoId,
  CosNotifyFilter::InvalidValue::_PD_repoId
};

void _0RL_cd_1fe8f330207afd15_e1000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, CosNotifyFilter::InvalidConstraint::_PD_repoId)) {
    CosNotifyFilter::InvalidConstraint _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if (omni::strMatch(repoId, CosNotifyFilter::InvalidValue::_PD_repoId)) {
    CosNotifyFilter::InvalidValue _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_f1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_e1000000* tcd = (_0RL_cd_1fe8f330207afd15_e1000000*)cd;
  CosNotifyFilter::_impl_MappingFilter* impl = (CosNotifyFilter::_impl_MappingFilter*) svnt->_ptrToInterface(CosNotifyFilter::MappingFilter::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->add_mapping_constraints(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->add_mapping_constraints(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->add_mapping_constraints(*tcd->arg_0);
    }
    catch(CosNotifyFilter::InvalidConstraint& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CosNotifyFilter::InvalidValue& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

CosNotifyFilter::MappingConstraintInfoSeq* CosNotifyFilter::_objref_MappingFilter::add_mapping_constraints(const ::CosNotifyFilter::MappingConstraintPairSeq& pair_list)
{
  _0RL_cd_1fe8f330207afd15_e1000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_f1000000, "add_mapping_constraints", 24);
  _call_desc.arg_0 = &(::CosNotifyFilter::MappingConstraintPairSeq&) pair_list;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for CosNotifyFilter::MappingFilter::modify_mapping_constraints

// Proxy call descriptor class. Mangled signature:
//  void_i_cCosNotifyFilter_mConstraintIDSeq_i_cCosNotifyFilter_mMappingConstraintInfoSeq_e_cCosNotifyFilter_mConstraintNotFound_e_cCosNotifyFilter_mInvalidConstraint_e_cCosNotifyFilter_mInvalidValue
class _0RL_cd_1fe8f330207afd15_02000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_02000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  CosNotifyFilter::ConstraintIDSeq_var arg_0_;
  const CosNotifyFilter::ConstraintIDSeq* arg_0;
  CosNotifyFilter::MappingConstraintInfoSeq_var arg_1_;
  const CosNotifyFilter::MappingConstraintInfoSeq* arg_1;
};

void _0RL_cd_1fe8f330207afd15_02000000::marshalArguments(cdrStream& _n)
{
  (const CosNotifyFilter::ConstraintIDSeq&) *arg_0 >>= _n;
  (const CosNotifyFilter::MappingConstraintInfoSeq&) *arg_1 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_02000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CosNotifyFilter::ConstraintIDSeq;
  (CosNotifyFilter::ConstraintIDSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new CosNotifyFilter::MappingConstraintInfoSeq;
  (CosNotifyFilter::MappingConstraintInfoSeq&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_1fe8f330207afd15_02000000::_user_exns[] = {
  CosNotifyFilter::ConstraintNotFound::_PD_repoId,
  CosNotifyFilter::InvalidConstraint::_PD_repoId,
  CosNotifyFilter::InvalidValue::_PD_repoId
};

void _0RL_cd_1fe8f330207afd15_02000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, CosNotifyFilter::ConstraintNotFound::_PD_repoId)) {
    CosNotifyFilter::ConstraintNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if (omni::strMatch(repoId, CosNotifyFilter::InvalidConstraint::_PD_repoId)) {
    CosNotifyFilter::InvalidConstraint _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if (omni::strMatch(repoId, CosNotifyFilter::InvalidValue::_PD_repoId)) {
    CosNotifyFilter::InvalidValue _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_12000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_02000000* tcd = (_0RL_cd_1fe8f330207afd15_02000000*)cd;
  CosNotifyFilter::_impl_MappingFilter* impl = (CosNotifyFilter::_impl_MappingFilter*) svnt->_ptrToInterface(CosNotifyFilter::MappingFilter::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->modify_mapping_constraints(*tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->modify_mapping_constraints(*tcd->arg_0, *tcd->arg_1);
  else {
    try {
      impl->modify_mapping_constraints(*tcd->arg_0, *tcd->arg_1);
    }
    catch(CosNotifyFilter::InvalidConstraint& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CosNotifyFilter::InvalidValue& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CosNotifyFilter::ConstraintNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CosNotifyFilter::_objref_MappingFilter::modify_mapping_constraints(const ::CosNotifyFilter::ConstraintIDSeq& del_list, const ::CosNotifyFilter::MappingConstraintInfoSeq& modify_list)
{
  _0RL_cd_1fe8f330207afd15_02000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_12000000, "modify_mapping_constraints", 27);
  _call_desc.arg_0 = &(::CosNotifyFilter::ConstraintIDSeq&) del_list;
  _call_desc.arg_1 = &(::CosNotifyFilter::MappingConstraintInfoSeq&) modify_list;

  _invoke(_call_desc);



}


//
// Code for CosNotifyFilter::MappingFilter::get_mapping_constraints

// Proxy call descriptor class. Mangled signature:
//  _cCosNotifyFilter_mMappingConstraintInfoSeq_i_cCosNotifyFilter_mConstraintIDSeq_e_cCosNotifyFilter_mConstraintNotFound
class _0RL_cd_1fe8f330207afd15_22000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_22000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  CosNotifyFilter::ConstraintIDSeq_var arg_0_;
  const CosNotifyFilter::ConstraintIDSeq* arg_0;
  CosNotifyFilter::MappingConstraintInfoSeq_var result;
};

void _0RL_cd_1fe8f330207afd15_22000000::marshalArguments(cdrStream& _n)
{
  (const CosNotifyFilter::ConstraintIDSeq&) *arg_0 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_22000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CosNotifyFilter::ConstraintIDSeq;
  (CosNotifyFilter::ConstraintIDSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_1fe8f330207afd15_22000000::marshalReturnedValues(cdrStream& _n)
{
  (const CosNotifyFilter::MappingConstraintInfoSeq&) result >>= _n;

}

void _0RL_cd_1fe8f330207afd15_22000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CosNotifyFilter::MappingConstraintInfoSeq;
  (CosNotifyFilter::MappingConstraintInfoSeq&)result <<= _n;

}

const char* const _0RL_cd_1fe8f330207afd15_22000000::_user_exns[] = {
  CosNotifyFilter::ConstraintNotFound::_PD_repoId
};

void _0RL_cd_1fe8f330207afd15_22000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, CosNotifyFilter::ConstraintNotFound::_PD_repoId)) {
    CosNotifyFilter::ConstraintNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_32000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_22000000* tcd = (_0RL_cd_1fe8f330207afd15_22000000*)cd;
  CosNotifyFilter::_impl_MappingFilter* impl = (CosNotifyFilter::_impl_MappingFilter*) svnt->_ptrToInterface(CosNotifyFilter::MappingFilter::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_mapping_constraints(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_mapping_constraints(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->get_mapping_constraints(*tcd->arg_0);
    }
    catch(CosNotifyFilter::ConstraintNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

CosNotifyFilter::MappingConstraintInfoSeq* CosNotifyFilter::_objref_MappingFilter::get_mapping_constraints(const ::CosNotifyFilter::ConstraintIDSeq& id_list)
{
  _0RL_cd_1fe8f330207afd15_22000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_32000000, "get_mapping_constraints", 24);
  _call_desc.arg_0 = &(::CosNotifyFilter::ConstraintIDSeq&) id_list;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for CosNotifyFilter::MappingFilter::get_all_mapping_constraints

// Proxy call descriptor class. Mangled signature:
//  _cCosNotifyFilter_mMappingConstraintInfoSeq
class _0RL_cd_1fe8f330207afd15_42000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_42000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  CosNotifyFilter::MappingConstraintInfoSeq_var result;
};

void _0RL_cd_1fe8f330207afd15_42000000::marshalReturnedValues(cdrStream& _n)
{
  (const CosNotifyFilter::MappingConstraintInfoSeq&) result >>= _n;

}

void _0RL_cd_1fe8f330207afd15_42000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CosNotifyFilter::MappingConstraintInfoSeq;
  (CosNotifyFilter::MappingConstraintInfoSeq&)result <<= _n;

}

const char* const _0RL_cd_1fe8f330207afd15_42000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_52000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_42000000* tcd = (_0RL_cd_1fe8f330207afd15_42000000*)cd;
  CosNotifyFilter::_impl_MappingFilter* impl = (CosNotifyFilter::_impl_MappingFilter*) svnt->_ptrToInterface(CosNotifyFilter::MappingFilter::_PD_repoId);
  tcd->result = impl->get_all_mapping_constraints();


}

CosNotifyFilter::MappingConstraintInfoSeq* CosNotifyFilter::_objref_MappingFilter::get_all_mapping_constraints()
{
  _0RL_cd_1fe8f330207afd15_42000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_52000000, "get_all_mapping_constraints", 28);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for CosNotifyFilter::MappingFilter::remove_all_mapping_constraints

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_62000000(omniCallDescriptor*, omniServant* svnt)
{
  
  CosNotifyFilter::_impl_MappingFilter* impl = (CosNotifyFilter::_impl_MappingFilter*) svnt->_ptrToInterface(CosNotifyFilter::MappingFilter::_PD_repoId);
  impl->remove_all_mapping_constraints();


}

void CosNotifyFilter::_objref_MappingFilter::remove_all_mapping_constraints()
{
  _0RL_cd_1fe8f330207afd15_a0000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_62000000, "remove_all_mapping_constraints", 31);


  _invoke(_call_desc);



}


//
// Code for CosNotifyFilter::MappingFilter::destroy

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_72000000(omniCallDescriptor*, omniServant* svnt)
{
  
  CosNotifyFilter::_impl_MappingFilter* impl = (CosNotifyFilter::_impl_MappingFilter*) svnt->_ptrToInterface(CosNotifyFilter::MappingFilter::_PD_repoId);
  impl->destroy();


}

void CosNotifyFilter::_objref_MappingFilter::destroy()
{
  _0RL_cd_1fe8f330207afd15_a0000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_72000000, "destroy", 8);


  _invoke(_call_desc);



}


//
// Code for CosNotifyFilter::MappingFilter::match

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cany_o_cany_e_cCosNotifyFilter_mUnsupportedFilterableData
class _0RL_cd_1fe8f330207afd15_82000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_82000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::Any_var arg_0_;
  const ::CORBA::Any* arg_0;
  ::CORBA::Any_var arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_1fe8f330207afd15_82000000::marshalArguments(cdrStream& _n)
{
  (const ::CORBA::Any&) *arg_0 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_82000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new ::CORBA::Any;
  (::CORBA::Any&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_1fe8f330207afd15_82000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);
  (const ::CORBA::Any&) arg_1 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_82000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();
  arg_1 = new ::CORBA::Any;
  (::CORBA::Any&)arg_1 <<= _n;

}

const char* const _0RL_cd_1fe8f330207afd15_82000000::_user_exns[] = {
  CosNotifyFilter::UnsupportedFilterableData::_PD_repoId
};

void _0RL_cd_1fe8f330207afd15_82000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, CosNotifyFilter::UnsupportedFilterableData::_PD_repoId)) {
    CosNotifyFilter::UnsupportedFilterableData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_92000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_82000000* tcd = (_0RL_cd_1fe8f330207afd15_82000000*)cd;
  CosNotifyFilter::_impl_MappingFilter* impl = (CosNotifyFilter::_impl_MappingFilter*) svnt->_ptrToInterface(CosNotifyFilter::MappingFilter::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->match(*tcd->arg_0, tcd->arg_1.out());
#else
  if (!cd->is_upcall())
    tcd->result = impl->match(*tcd->arg_0, tcd->arg_1.out());
  else {
    try {
      tcd->result = impl->match(*tcd->arg_0, tcd->arg_1.out());
    }
    catch(CosNotifyFilter::UnsupportedFilterableData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean CosNotifyFilter::_objref_MappingFilter::match(const ::CORBA::Any& filterable_data, ::CORBA::Any_OUT_arg result_to_set)
{
  _0RL_cd_1fe8f330207afd15_82000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_92000000, "match", 6);
  _call_desc.arg_0 = &(::CORBA::Any&) filterable_data;

  _invoke(_call_desc);
  result_to_set = _call_desc.arg_1._retn();
  return _call_desc.result;


}


//
// Code for CosNotifyFilter::MappingFilter::match_structured

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cCosNotification_mStructuredEvent_o_cany_e_cCosNotifyFilter_mUnsupportedFilterableData
class _0RL_cd_1fe8f330207afd15_a2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_a2000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  CosNotification::StructuredEvent_var arg_0_;
  const CosNotification::StructuredEvent* arg_0;
  ::CORBA::Any_var arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_1fe8f330207afd15_a2000000::marshalArguments(cdrStream& _n)
{
  (const CosNotification::StructuredEvent&) *arg_0 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_a2000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CosNotification::StructuredEvent;
  (CosNotification::StructuredEvent&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_1fe8f330207afd15_a2000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);
  (const ::CORBA::Any&) arg_1 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_a2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();
  arg_1 = new ::CORBA::Any;
  (::CORBA::Any&)arg_1 <<= _n;

}

const char* const _0RL_cd_1fe8f330207afd15_a2000000::_user_exns[] = {
  CosNotifyFilter::UnsupportedFilterableData::_PD_repoId
};

void _0RL_cd_1fe8f330207afd15_a2000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, CosNotifyFilter::UnsupportedFilterableData::_PD_repoId)) {
    CosNotifyFilter::UnsupportedFilterableData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_b2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_a2000000* tcd = (_0RL_cd_1fe8f330207afd15_a2000000*)cd;
  CosNotifyFilter::_impl_MappingFilter* impl = (CosNotifyFilter::_impl_MappingFilter*) svnt->_ptrToInterface(CosNotifyFilter::MappingFilter::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->match_structured(*tcd->arg_0, tcd->arg_1.out());
#else
  if (!cd->is_upcall())
    tcd->result = impl->match_structured(*tcd->arg_0, tcd->arg_1.out());
  else {
    try {
      tcd->result = impl->match_structured(*tcd->arg_0, tcd->arg_1.out());
    }
    catch(CosNotifyFilter::UnsupportedFilterableData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean CosNotifyFilter::_objref_MappingFilter::match_structured(const ::CosNotification::StructuredEvent& filterable_data, ::CORBA::Any_OUT_arg result_to_set)
{
  _0RL_cd_1fe8f330207afd15_a2000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_b2000000, "match_structured", 17);
  _call_desc.arg_0 = &(::CosNotification::StructuredEvent&) filterable_data;

  _invoke(_call_desc);
  result_to_set = _call_desc.arg_1._retn();
  return _call_desc.result;


}


//
// Code for CosNotifyFilter::MappingFilter::match_typed

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cCosNotification_mPropertySeq_o_cany_e_cCosNotifyFilter_mUnsupportedFilterableData
class _0RL_cd_1fe8f330207afd15_c2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_c2000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  CosNotification::PropertySeq_var arg_0_;
  const CosNotification::PropertySeq* arg_0;
  ::CORBA::Any_var arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_1fe8f330207afd15_c2000000::marshalArguments(cdrStream& _n)
{
  (const CosNotification::PropertySeq&) *arg_0 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_c2000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CosNotification::PropertySeq;
  (CosNotification::PropertySeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_1fe8f330207afd15_c2000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);
  (const ::CORBA::Any&) arg_1 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_c2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();
  arg_1 = new ::CORBA::Any;
  (::CORBA::Any&)arg_1 <<= _n;

}

const char* const _0RL_cd_1fe8f330207afd15_c2000000::_user_exns[] = {
  CosNotifyFilter::UnsupportedFilterableData::_PD_repoId
};

void _0RL_cd_1fe8f330207afd15_c2000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, CosNotifyFilter::UnsupportedFilterableData::_PD_repoId)) {
    CosNotifyFilter::UnsupportedFilterableData _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_d2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_c2000000* tcd = (_0RL_cd_1fe8f330207afd15_c2000000*)cd;
  CosNotifyFilter::_impl_MappingFilter* impl = (CosNotifyFilter::_impl_MappingFilter*) svnt->_ptrToInterface(CosNotifyFilter::MappingFilter::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->match_typed(*tcd->arg_0, tcd->arg_1.out());
#else
  if (!cd->is_upcall())
    tcd->result = impl->match_typed(*tcd->arg_0, tcd->arg_1.out());
  else {
    try {
      tcd->result = impl->match_typed(*tcd->arg_0, tcd->arg_1.out());
    }
    catch(CosNotifyFilter::UnsupportedFilterableData& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean CosNotifyFilter::_objref_MappingFilter::match_typed(const ::CosNotification::PropertySeq& filterable_data, ::CORBA::Any_OUT_arg result_to_set)
{
  _0RL_cd_1fe8f330207afd15_c2000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_d2000000, "match_typed", 12);
  _call_desc.arg_0 = &(::CosNotification::PropertySeq&) filterable_data;

  _invoke(_call_desc);
  result_to_set = _call_desc.arg_1._retn();
  return _call_desc.result;


}

CosNotifyFilter::_pof_MappingFilter::~_pof_MappingFilter() {}


omniObjRef*
CosNotifyFilter::_pof_MappingFilter::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CosNotifyFilter::_objref_MappingFilter(ior, id);
}


::CORBA::Boolean
CosNotifyFilter::_pof_MappingFilter::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::CosNotifyFilter::MappingFilter::_PD_repoId))
    return 1;
  
  return 0;
}

const CosNotifyFilter::_pof_MappingFilter _the_pof_CosNotifyFilter_mMappingFilter;

CosNotifyFilter::_impl_MappingFilter::~_impl_MappingFilter() {}


::CORBA::Boolean
CosNotifyFilter::_impl_MappingFilter::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "_get_constraint_grammar")) {

    _0RL_cd_1fe8f330207afd15_00000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_91000000, "_get_constraint_grammar", 24, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_value_type")) {

    _0RL_cd_1fe8f330207afd15_a1000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_b1000000, "_get_value_type", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "_get_default_value")) {

    _0RL_cd_1fe8f330207afd15_c1000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_d1000000, "_get_default_value", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "add_mapping_constraints")) {

    _0RL_cd_1fe8f330207afd15_e1000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_f1000000, "add_mapping_constraints", 24, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "modify_mapping_constraints")) {

    _0RL_cd_1fe8f330207afd15_02000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_12000000, "modify_mapping_constraints", 27, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "get_mapping_constraints")) {

    _0RL_cd_1fe8f330207afd15_22000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_32000000, "get_mapping_constraints", 24, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "get_all_mapping_constraints")) {

    _0RL_cd_1fe8f330207afd15_42000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_52000000, "get_all_mapping_constraints", 28, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "remove_all_mapping_constraints")) {

    _0RL_cd_1fe8f330207afd15_a0000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_62000000, "remove_all_mapping_constraints", 31, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "destroy")) {

    _0RL_cd_1fe8f330207afd15_a0000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_72000000, "destroy", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "match")) {

    _0RL_cd_1fe8f330207afd15_82000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_92000000, "match", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "match_structured")) {

    _0RL_cd_1fe8f330207afd15_a2000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_b2000000, "match_structured", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "match_typed")) {

    _0RL_cd_1fe8f330207afd15_c2000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_d2000000, "match_typed", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
CosNotifyFilter::_impl_MappingFilter::_ptrToInterface(const char* id)
{
  if (id == ::CosNotifyFilter::MappingFilter::_PD_repoId)
    return (::CosNotifyFilter::_impl_MappingFilter*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::CosNotifyFilter::MappingFilter::_PD_repoId))
    return (::CosNotifyFilter::_impl_MappingFilter*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
CosNotifyFilter::_impl_MappingFilter::_mostDerivedRepoId()
{
  return ::CosNotifyFilter::MappingFilter::_PD_repoId;
}

CosNotifyFilter::FilterFactory_ptr CosNotifyFilter::FilterFactory_Helper::_nil() {
  return ::CosNotifyFilter::FilterFactory::_nil();
}

::CORBA::Boolean CosNotifyFilter::FilterFactory_Helper::is_nil(::CosNotifyFilter::FilterFactory_ptr p) {
  return ::CORBA::is_nil(p);

}

void CosNotifyFilter::FilterFactory_Helper::release(::CosNotifyFilter::FilterFactory_ptr p) {
  ::CORBA::release(p);
}

void CosNotifyFilter::FilterFactory_Helper::marshalObjRef(::CosNotifyFilter::FilterFactory_ptr obj, cdrStream& s) {
  ::CosNotifyFilter::FilterFactory::_marshalObjRef(obj, s);
}

CosNotifyFilter::FilterFactory_ptr CosNotifyFilter::FilterFactory_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CosNotifyFilter::FilterFactory::_unmarshalObjRef(s);
}

void CosNotifyFilter::FilterFactory_Helper::duplicate(::CosNotifyFilter::FilterFactory_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

CosNotifyFilter::FilterFactory_ptr
CosNotifyFilter::FilterFactory::_duplicate(::CosNotifyFilter::FilterFactory_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

CosNotifyFilter::FilterFactory_ptr
CosNotifyFilter::FilterFactory::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CosNotifyFilter::FilterFactory_ptr
CosNotifyFilter::FilterFactory::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CosNotifyFilter::FilterFactory_ptr
CosNotifyFilter::FilterFactory::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_FilterFactory _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_FilterFactory* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_FilterFactory;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CosNotifyFilter::FilterFactory::_PD_repoId = "IDL:omg.org/CosNotifyFilter/FilterFactory:1.0";


CosNotifyFilter::_objref_FilterFactory::~_objref_FilterFactory() {
  
}


CosNotifyFilter::_objref_FilterFactory::_objref_FilterFactory(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CosNotifyFilter::FilterFactory::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
CosNotifyFilter::_objref_FilterFactory::_ptrToObjRef(const char* id)
{
  if (id == ::CosNotifyFilter::FilterFactory::_PD_repoId)
    return (::CosNotifyFilter::FilterFactory_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::CosNotifyFilter::FilterFactory::_PD_repoId))
    return (::CosNotifyFilter::FilterFactory_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for CosNotifyFilter::FilterFactory::create_filter

// Proxy call descriptor class. Mangled signature:
//  _cCosNotifyFilter_mFilter_i_cstring_e_cCosNotifyFilter_mInvalidGrammar
class _0RL_cd_1fe8f330207afd15_e2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_e2000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  CosNotifyFilter::Filter_var result;
};

void _0RL_cd_1fe8f330207afd15_e2000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_1fe8f330207afd15_e2000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_1fe8f330207afd15_e2000000::marshalReturnedValues(cdrStream& _n)
{
  CosNotifyFilter::Filter::_marshalObjRef(result,_n);

}

void _0RL_cd_1fe8f330207afd15_e2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = CosNotifyFilter::Filter::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_1fe8f330207afd15_e2000000::_user_exns[] = {
  CosNotifyFilter::InvalidGrammar::_PD_repoId
};

void _0RL_cd_1fe8f330207afd15_e2000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, CosNotifyFilter::InvalidGrammar::_PD_repoId)) {
    CosNotifyFilter::InvalidGrammar _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_f2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_e2000000* tcd = (_0RL_cd_1fe8f330207afd15_e2000000*)cd;
  CosNotifyFilter::_impl_FilterFactory* impl = (CosNotifyFilter::_impl_FilterFactory*) svnt->_ptrToInterface(CosNotifyFilter::FilterFactory::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->create_filter(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->create_filter(tcd->arg_0);
  else {
    try {
      tcd->result = impl->create_filter(tcd->arg_0);
    }
    catch(CosNotifyFilter::InvalidGrammar& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

CosNotifyFilter::Filter_ptr CosNotifyFilter::_objref_FilterFactory::create_filter(const char* constraint_grammar)
{
  _0RL_cd_1fe8f330207afd15_e2000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_f2000000, "create_filter", 14);
  _call_desc.arg_0 = constraint_grammar;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for CosNotifyFilter::FilterFactory::create_mapping_filter

// Proxy call descriptor class. Mangled signature:
//  _cCosNotifyFilter_mMappingFilter_i_cstring_i_cany_e_cCosNotifyFilter_mInvalidGrammar
class _0RL_cd_1fe8f330207afd15_03000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_03000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Any_var arg_1_;
  const ::CORBA::Any* arg_1;
  CosNotifyFilter::MappingFilter_var result;
};

void _0RL_cd_1fe8f330207afd15_03000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  (const ::CORBA::Any&) *arg_1 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_03000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = new ::CORBA::Any;
  (::CORBA::Any&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_1fe8f330207afd15_03000000::marshalReturnedValues(cdrStream& _n)
{
  CosNotifyFilter::MappingFilter::_marshalObjRef(result,_n);

}

void _0RL_cd_1fe8f330207afd15_03000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = CosNotifyFilter::MappingFilter::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_1fe8f330207afd15_03000000::_user_exns[] = {
  CosNotifyFilter::InvalidGrammar::_PD_repoId
};

void _0RL_cd_1fe8f330207afd15_03000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, CosNotifyFilter::InvalidGrammar::_PD_repoId)) {
    CosNotifyFilter::InvalidGrammar _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_13000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_03000000* tcd = (_0RL_cd_1fe8f330207afd15_03000000*)cd;
  CosNotifyFilter::_impl_FilterFactory* impl = (CosNotifyFilter::_impl_FilterFactory*) svnt->_ptrToInterface(CosNotifyFilter::FilterFactory::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->create_mapping_filter(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->create_mapping_filter(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->create_mapping_filter(tcd->arg_0, *tcd->arg_1);
    }
    catch(CosNotifyFilter::InvalidGrammar& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

CosNotifyFilter::MappingFilter_ptr CosNotifyFilter::_objref_FilterFactory::create_mapping_filter(const char* constraint_grammar, const ::CORBA::Any& default_value)
{
  _0RL_cd_1fe8f330207afd15_03000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_13000000, "create_mapping_filter", 22);
  _call_desc.arg_0 = constraint_grammar;
  _call_desc.arg_1 = &(::CORBA::Any&) default_value;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}

CosNotifyFilter::_pof_FilterFactory::~_pof_FilterFactory() {}


omniObjRef*
CosNotifyFilter::_pof_FilterFactory::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CosNotifyFilter::_objref_FilterFactory(ior, id);
}


::CORBA::Boolean
CosNotifyFilter::_pof_FilterFactory::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::CosNotifyFilter::FilterFactory::_PD_repoId))
    return 1;
  
  return 0;
}

const CosNotifyFilter::_pof_FilterFactory _the_pof_CosNotifyFilter_mFilterFactory;

CosNotifyFilter::_impl_FilterFactory::~_impl_FilterFactory() {}


::CORBA::Boolean
CosNotifyFilter::_impl_FilterFactory::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "create_filter")) {

    _0RL_cd_1fe8f330207afd15_e2000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_f2000000, "create_filter", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "create_mapping_filter")) {

    _0RL_cd_1fe8f330207afd15_03000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_13000000, "create_mapping_filter", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
CosNotifyFilter::_impl_FilterFactory::_ptrToInterface(const char* id)
{
  if (id == ::CosNotifyFilter::FilterFactory::_PD_repoId)
    return (::CosNotifyFilter::_impl_FilterFactory*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::CosNotifyFilter::FilterFactory::_PD_repoId))
    return (::CosNotifyFilter::_impl_FilterFactory*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
CosNotifyFilter::_impl_FilterFactory::_mostDerivedRepoId()
{
  return ::CosNotifyFilter::FilterFactory::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny CosNotifyFilter::FilterNotFound::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CosNotifyFilter::FilterNotFound::insertToAnyFnNCP = 0;

CosNotifyFilter::FilterNotFound::FilterNotFound(const CosNotifyFilter::FilterNotFound& _s) : ::CORBA::UserException(_s)
{
  
}



CosNotifyFilter::FilterNotFound& CosNotifyFilter::FilterNotFound::operator=(const CosNotifyFilter::FilterNotFound& _s)
{
  if (&_s != this) {
    ((::CORBA::UserException*) this)->operator=(_s);
    
  }
  return *this;
}

CosNotifyFilter::FilterNotFound::~FilterNotFound() {}

void CosNotifyFilter::FilterNotFound::_raise() const { throw *this; }

const char* CosNotifyFilter::FilterNotFound::_PD_repoId = "IDL:omg.org/CosNotifyFilter/FilterNotFound:1.0";
const char* CosNotifyFilter::FilterNotFound::_PD_typeId = "Exception/UserException/CosNotifyFilter::FilterNotFound";

CosNotifyFilter::FilterNotFound* CosNotifyFilter::FilterNotFound::_downcast(::CORBA::Exception* _e) {
  return (FilterNotFound*) _NP_is_a(_e, _PD_typeId);
}

const CosNotifyFilter::FilterNotFound* CosNotifyFilter::FilterNotFound::_downcast(const ::CORBA::Exception* _e) {
  return (const FilterNotFound*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CosNotifyFilter::FilterNotFound::_NP_duplicate() const {
  return new FilterNotFound(*this);
}

const char* CosNotifyFilter::FilterNotFound::_NP_typeId() const {
  return _PD_typeId;
}

const char* CosNotifyFilter::FilterNotFound::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:omg.org/CosNotifyFilter/FilterNotFound:1.0");
  return _PD_repoId;
}
 
void CosNotifyFilter::FilterNotFound::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

CosNotifyFilter::FilterAdmin_ptr CosNotifyFilter::FilterAdmin_Helper::_nil() {
  return ::CosNotifyFilter::FilterAdmin::_nil();
}

::CORBA::Boolean CosNotifyFilter::FilterAdmin_Helper::is_nil(::CosNotifyFilter::FilterAdmin_ptr p) {
  return ::CORBA::is_nil(p);

}

void CosNotifyFilter::FilterAdmin_Helper::release(::CosNotifyFilter::FilterAdmin_ptr p) {
  ::CORBA::release(p);
}

void CosNotifyFilter::FilterAdmin_Helper::marshalObjRef(::CosNotifyFilter::FilterAdmin_ptr obj, cdrStream& s) {
  ::CosNotifyFilter::FilterAdmin::_marshalObjRef(obj, s);
}

CosNotifyFilter::FilterAdmin_ptr CosNotifyFilter::FilterAdmin_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CosNotifyFilter::FilterAdmin::_unmarshalObjRef(s);
}

void CosNotifyFilter::FilterAdmin_Helper::duplicate(::CosNotifyFilter::FilterAdmin_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

CosNotifyFilter::FilterAdmin_ptr
CosNotifyFilter::FilterAdmin::_duplicate(::CosNotifyFilter::FilterAdmin_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

CosNotifyFilter::FilterAdmin_ptr
CosNotifyFilter::FilterAdmin::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CosNotifyFilter::FilterAdmin_ptr
CosNotifyFilter::FilterAdmin::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CosNotifyFilter::FilterAdmin_ptr
CosNotifyFilter::FilterAdmin::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_FilterAdmin _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_FilterAdmin* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_FilterAdmin;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CosNotifyFilter::FilterAdmin::_PD_repoId = "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0";


CosNotifyFilter::_objref_FilterAdmin::~_objref_FilterAdmin() {
  
}


CosNotifyFilter::_objref_FilterAdmin::_objref_FilterAdmin(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CosNotifyFilter::FilterAdmin::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
CosNotifyFilter::_objref_FilterAdmin::_ptrToObjRef(const char* id)
{
  if (id == ::CosNotifyFilter::FilterAdmin::_PD_repoId)
    return (::CosNotifyFilter::FilterAdmin_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::CosNotifyFilter::FilterAdmin::_PD_repoId))
    return (::CosNotifyFilter::FilterAdmin_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for CosNotifyFilter::FilterAdmin::add_filter

// Proxy call descriptor class. Mangled signature:
//  _clong_i_cCosNotifyFilter_mFilter
class _0RL_cd_1fe8f330207afd15_23000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_23000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  CosNotifyFilter::Filter_var arg_0_;
  CosNotifyFilter::Filter_ptr arg_0;
  CosNotifyFilter::FilterID result;
};

void _0RL_cd_1fe8f330207afd15_23000000::marshalArguments(cdrStream& _n)
{
  CosNotifyFilter::Filter::_marshalObjRef(arg_0,_n);

}

void _0RL_cd_1fe8f330207afd15_23000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = CosNotifyFilter::Filter::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

void _0RL_cd_1fe8f330207afd15_23000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_1fe8f330207afd15_23000000::unmarshalReturnedValues(cdrStream& _n)
{
  (CosNotifyFilter::FilterID&)result <<= _n;

}

const char* const _0RL_cd_1fe8f330207afd15_23000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_33000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_23000000* tcd = (_0RL_cd_1fe8f330207afd15_23000000*)cd;
  CosNotifyFilter::_impl_FilterAdmin* impl = (CosNotifyFilter::_impl_FilterAdmin*) svnt->_ptrToInterface(CosNotifyFilter::FilterAdmin::_PD_repoId);
  tcd->result = impl->add_filter(tcd->arg_0);


}

CosNotifyFilter::FilterID CosNotifyFilter::_objref_FilterAdmin::add_filter(::CosNotifyFilter::Filter_ptr new_filter)
{
  _0RL_cd_1fe8f330207afd15_23000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_33000000, "add_filter", 11);
  _call_desc.arg_0 = new_filter;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for CosNotifyFilter::FilterAdmin::remove_filter

// Proxy call descriptor class. Mangled signature:
//  void_i_clong_e_cCosNotifyFilter_mFilterNotFound
class _0RL_cd_1fe8f330207afd15_43000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_43000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  CosNotifyFilter::FilterID arg_0;
};

void _0RL_cd_1fe8f330207afd15_43000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_43000000::unmarshalArguments(cdrStream& _n)
{
  (CosNotifyFilter::FilterID&)arg_0 <<= _n;

}

const char* const _0RL_cd_1fe8f330207afd15_43000000::_user_exns[] = {
  CosNotifyFilter::FilterNotFound::_PD_repoId
};

void _0RL_cd_1fe8f330207afd15_43000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, CosNotifyFilter::FilterNotFound::_PD_repoId)) {
    CosNotifyFilter::FilterNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_53000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_43000000* tcd = (_0RL_cd_1fe8f330207afd15_43000000*)cd;
  CosNotifyFilter::_impl_FilterAdmin* impl = (CosNotifyFilter::_impl_FilterAdmin*) svnt->_ptrToInterface(CosNotifyFilter::FilterAdmin::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->remove_filter(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->remove_filter(tcd->arg_0);
  else {
    try {
      impl->remove_filter(tcd->arg_0);
    }
    catch(CosNotifyFilter::FilterNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CosNotifyFilter::_objref_FilterAdmin::remove_filter(::CosNotifyFilter::FilterID filter)
{
  _0RL_cd_1fe8f330207afd15_43000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_53000000, "remove_filter", 14);
  _call_desc.arg_0 = filter;

  _invoke(_call_desc);



}


//
// Code for CosNotifyFilter::FilterAdmin::get_filter

// Proxy call descriptor class. Mangled signature:
//  _cCosNotifyFilter_mFilter_i_clong_e_cCosNotifyFilter_mFilterNotFound
class _0RL_cd_1fe8f330207afd15_63000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_63000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  CosNotifyFilter::FilterID arg_0;
  CosNotifyFilter::Filter_var result;
};

void _0RL_cd_1fe8f330207afd15_63000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_1fe8f330207afd15_63000000::unmarshalArguments(cdrStream& _n)
{
  (CosNotifyFilter::FilterID&)arg_0 <<= _n;

}

void _0RL_cd_1fe8f330207afd15_63000000::marshalReturnedValues(cdrStream& _n)
{
  CosNotifyFilter::Filter::_marshalObjRef(result,_n);

}

void _0RL_cd_1fe8f330207afd15_63000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = CosNotifyFilter::Filter::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_1fe8f330207afd15_63000000::_user_exns[] = {
  CosNotifyFilter::FilterNotFound::_PD_repoId
};

void _0RL_cd_1fe8f330207afd15_63000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, CosNotifyFilter::FilterNotFound::_PD_repoId)) {
    CosNotifyFilter::FilterNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_73000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_63000000* tcd = (_0RL_cd_1fe8f330207afd15_63000000*)cd;
  CosNotifyFilter::_impl_FilterAdmin* impl = (CosNotifyFilter::_impl_FilterAdmin*) svnt->_ptrToInterface(CosNotifyFilter::FilterAdmin::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->get_filter(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->get_filter(tcd->arg_0);
  else {
    try {
      tcd->result = impl->get_filter(tcd->arg_0);
    }
    catch(CosNotifyFilter::FilterNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

CosNotifyFilter::Filter_ptr CosNotifyFilter::_objref_FilterAdmin::get_filter(::CosNotifyFilter::FilterID filter)
{
  _0RL_cd_1fe8f330207afd15_63000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_73000000, "get_filter", 11);
  _call_desc.arg_0 = filter;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for CosNotifyFilter::FilterAdmin::get_all_filters

// Proxy call descriptor class. Mangled signature:
//  _cCosNotifyFilter_mFilterIDSeq
class _0RL_cd_1fe8f330207afd15_83000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_1fe8f330207afd15_83000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  CosNotifyFilter::FilterIDSeq_var result;
};

void _0RL_cd_1fe8f330207afd15_83000000::marshalReturnedValues(cdrStream& _n)
{
  (const CosNotifyFilter::FilterIDSeq&) result >>= _n;

}

void _0RL_cd_1fe8f330207afd15_83000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CosNotifyFilter::FilterIDSeq;
  (CosNotifyFilter::FilterIDSeq&)result <<= _n;

}

const char* const _0RL_cd_1fe8f330207afd15_83000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_93000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_1fe8f330207afd15_83000000* tcd = (_0RL_cd_1fe8f330207afd15_83000000*)cd;
  CosNotifyFilter::_impl_FilterAdmin* impl = (CosNotifyFilter::_impl_FilterAdmin*) svnt->_ptrToInterface(CosNotifyFilter::FilterAdmin::_PD_repoId);
  tcd->result = impl->get_all_filters();


}

CosNotifyFilter::FilterIDSeq* CosNotifyFilter::_objref_FilterAdmin::get_all_filters()
{
  _0RL_cd_1fe8f330207afd15_83000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_93000000, "get_all_filters", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for CosNotifyFilter::FilterAdmin::remove_all_filters

// Local call call-back function.
static void
_0RL_lcfn_1fe8f330207afd15_a3000000(omniCallDescriptor*, omniServant* svnt)
{
  
  CosNotifyFilter::_impl_FilterAdmin* impl = (CosNotifyFilter::_impl_FilterAdmin*) svnt->_ptrToInterface(CosNotifyFilter::FilterAdmin::_PD_repoId);
  impl->remove_all_filters();


}

void CosNotifyFilter::_objref_FilterAdmin::remove_all_filters()
{
  _0RL_cd_1fe8f330207afd15_a0000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_a3000000, "remove_all_filters", 19);


  _invoke(_call_desc);



}

CosNotifyFilter::_pof_FilterAdmin::~_pof_FilterAdmin() {}


omniObjRef*
CosNotifyFilter::_pof_FilterAdmin::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CosNotifyFilter::_objref_FilterAdmin(ior, id);
}


::CORBA::Boolean
CosNotifyFilter::_pof_FilterAdmin::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::CosNotifyFilter::FilterAdmin::_PD_repoId))
    return 1;
  
  return 0;
}

const CosNotifyFilter::_pof_FilterAdmin _the_pof_CosNotifyFilter_mFilterAdmin;

CosNotifyFilter::_impl_FilterAdmin::~_impl_FilterAdmin() {}


::CORBA::Boolean
CosNotifyFilter::_impl_FilterAdmin::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "add_filter")) {

    _0RL_cd_1fe8f330207afd15_23000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_33000000, "add_filter", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "remove_filter")) {

    _0RL_cd_1fe8f330207afd15_43000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_53000000, "remove_filter", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "get_filter")) {

    _0RL_cd_1fe8f330207afd15_63000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_73000000, "get_filter", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "get_all_filters")) {

    _0RL_cd_1fe8f330207afd15_83000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_93000000, "get_all_filters", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "remove_all_filters")) {

    _0RL_cd_1fe8f330207afd15_a0000000 _call_desc(_0RL_lcfn_1fe8f330207afd15_a3000000, "remove_all_filters", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
CosNotifyFilter::_impl_FilterAdmin::_ptrToInterface(const char* id)
{
  if (id == ::CosNotifyFilter::FilterAdmin::_PD_repoId)
    return (::CosNotifyFilter::_impl_FilterAdmin*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::CosNotifyFilter::FilterAdmin::_PD_repoId))
    return (::CosNotifyFilter::_impl_FilterAdmin*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
CosNotifyFilter::_impl_FilterAdmin::_mostDerivedRepoId()
{
  return ::CosNotifyFilter::FilterAdmin::_PD_repoId;
}

POA_CosNotifyFilter::Filter::~Filter() {}

POA_CosNotifyFilter::MappingFilter::~MappingFilter() {}

POA_CosNotifyFilter::FilterFactory::~FilterFactory() {}

POA_CosNotifyFilter::FilterAdmin::~FilterAdmin() {}

