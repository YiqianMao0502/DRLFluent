// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __messaging_hh__
#define __messaging_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_messaging
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_messaging
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_messaging
#endif



#ifndef __corbaidl_hh_EXTERNAL_GUARD__
#define __corbaidl_hh_EXTERNAL_GUARD__
#include <corbaidl.hh>
#endif
#ifndef __pollable_hh_EXTERNAL_GUARD__
#define __pollable_hh_EXTERNAL_GUARD__
#include <pollable.hh>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE Messaging

_CORBA_MODULE_BEG

#ifndef __Messaging_mReplyHandler__
#define __Messaging_mReplyHandler__
  class ReplyHandler;
  class _objref_ReplyHandler;
  class _impl_ReplyHandler;
  
  typedef _objref_ReplyHandler* ReplyHandler_ptr;
  typedef ReplyHandler_ptr ReplyHandlerRef;

  class ReplyHandler_Helper {
  public:
    typedef ReplyHandler_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_ReplyHandler, ReplyHandler_Helper> ReplyHandler_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_ReplyHandler,ReplyHandler_Helper > ReplyHandler_out;

#endif

  // interface ReplyHandler
  class ReplyHandler {
  public:
    // Declarations for this interface type.
    typedef ReplyHandler_ptr _ptr_type;
    typedef ReplyHandler_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_ReplyHandler :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    

    // Constructors
    inline _objref_ReplyHandler()  { _PR_setobj(0); }  // nil
    _objref_ReplyHandler(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_ReplyHandler();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_ReplyHandler(const _objref_ReplyHandler&);
    _objref_ReplyHandler& operator = (const _objref_ReplyHandler&);
    // not implemented

    friend class ReplyHandler;
  };

  class _pof_ReplyHandler : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_ReplyHandler() : _OMNI_NS(proxyObjectFactory)(ReplyHandler::_PD_repoId) {}
    virtual ~_pof_ReplyHandler();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_ReplyHandler :
    public virtual omniServant
  {
  public:
    virtual ~_impl_ReplyHandler();

    
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


#ifndef __Messaging_mPoller__
#define __Messaging_mPoller__

  class Poller;

  class Poller_Helper {
  public:
    static void add_ref(Poller*);
    static void remove_ref(Poller*);
    static void marshal(Poller*, cdrStream&);
    static Poller* unmarshal(cdrStream&);
  };

  typedef _CORBA_Value_Var    <Poller,Poller_Helper> Poller_var;
  typedef _CORBA_Value_Member <Poller,Poller_Helper> Poller_member;
  typedef _CORBA_Value_OUT_arg<Poller,Poller_Helper> Poller_out;

#endif // __Messaging_mPoller__

  class Poller : 
    public virtual CORBA::Pollable
  {
  public:  
    // Standard mapping
    typedef Poller*    _ptr_type;
    typedef Poller_var _var_type;

    static _ptr_type _downcast(::CORBA::ValueBase*);
    

#ifdef OMNI_HAVE_COVARIANT_RETURNS
    virtual Poller* _copy_value();
#else
    virtual ::CORBA::ValueBase* _copy_value();
#endif

    // Definitions in this scope
    

    // Operations and attributes
    virtual ::CORBA::Object_ptr operation_target() = 0;
    virtual char* operation_name() = 0;
    virtual ReplyHandler_ptr associated_handler() = 0;
    virtual void associated_handler(::Messaging::ReplyHandler_ptr _v) = 0;
    virtual ::CORBA::Boolean is_from_poller() = 0;

    // Accessors for public members
    

  protected:
    // Accessors for private members
    

  public:
    // omniORB internal
    virtual const char* _NP_repositoryId() const;
    virtual const char* _NP_repositoryId(::CORBA::ULong& _hashval) const;

    virtual const _omni_ValueIds* _NP_truncatableIds() const;

    virtual ::CORBA::Boolean _NP_custom() const;

    virtual void* _ptrToValue(const char* id);

    static void _NP_marshal(Poller*, cdrStream&);
    static Poller* _NP_unmarshal(cdrStream&);
    

    virtual void _PR_marshal_state(cdrStream&) const;
    virtual void _PR_unmarshal_state(cdrStream&);
    virtual void _PR_copy_state(Poller*);

    static _core_attr const char* _PD_repoId;

  protected:
    Poller();
    virtual ~Poller();

  private:
    // Not implemented
    Poller(const Poller&);
    Poller& operator=(const Poller&);
  };

#ifndef __Messaging_mExceptionHolder__
#define __Messaging_mExceptionHolder__

  class ExceptionHolder;

  class ExceptionHolder_Helper {
  public:
    static void add_ref(ExceptionHolder*);
    static void remove_ref(ExceptionHolder*);
    static void marshal(ExceptionHolder*, cdrStream&);
    static ExceptionHolder* unmarshal(cdrStream&);
  };

  typedef _CORBA_Value_Var    <ExceptionHolder,ExceptionHolder_Helper> ExceptionHolder_var;
  typedef _CORBA_Value_Member <ExceptionHolder,ExceptionHolder_Helper> ExceptionHolder_member;
  typedef _CORBA_Value_OUT_arg<ExceptionHolder,ExceptionHolder_Helper> ExceptionHolder_out;

#endif // __Messaging_mExceptionHolder__

  class ExceptionHolder : 
    public virtual ::CORBA::ValueBase
  {
  public:  
    // Standard mapping
    typedef ExceptionHolder*    _ptr_type;
    typedef ExceptionHolder_var _var_type;

    static _ptr_type _downcast(::CORBA::ValueBase*);
    

#ifdef OMNI_HAVE_COVARIANT_RETURNS
    virtual ExceptionHolder* _copy_value();
#else
    virtual ::CORBA::ValueBase* _copy_value();
#endif

    // Definitions in this scope
    

    // Operations and attributes
    virtual void raise_exception() = 0;

    // Accessors for public members
    

  protected:
    // Accessors for private members
    

  public:
    // omniORB internal
    virtual const char* _NP_repositoryId() const;
    virtual const char* _NP_repositoryId(::CORBA::ULong& _hashval) const;

    virtual const _omni_ValueIds* _NP_truncatableIds() const;

    virtual ::CORBA::Boolean _NP_custom() const;

    virtual void* _ptrToValue(const char* id);

    static void _NP_marshal(ExceptionHolder*, cdrStream&);
    static ExceptionHolder* _NP_unmarshal(cdrStream&);
    

    virtual void _PR_marshal_state(cdrStream&) const;
    virtual void _PR_unmarshal_state(cdrStream&);
    virtual void _PR_copy_state(ExceptionHolder*);

    static _core_attr const char* _PD_repoId;

  protected:
    ExceptionHolder();
    virtual ~ExceptionHolder();

  private:
    // Not implemented
    ExceptionHolder(const ExceptionHolder&);
    ExceptionHolder& operator=(const ExceptionHolder&);
  };

_CORBA_MODULE_END



_CORBA_MODULE POA_Messaging
_CORBA_MODULE_BEG

  class ReplyHandler :
    public virtual Messaging::_impl_ReplyHandler,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~ReplyHandler();

    inline ::Messaging::ReplyHandler_ptr _this() {
      return (::Messaging::ReplyHandler_ptr) _do_this(::Messaging::ReplyHandler::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_Messaging
_CORBA_MODULE_BEG

  class ExceptionHolder :
    public virtual Messaging::ExceptionHolder
  {
  protected:
    ExceptionHolder();
    
    virtual ~ExceptionHolder();

  public:
    

  protected:
    

  private:
    
  };

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
Messaging::ReplyHandler::_marshalObjRef(::Messaging::ReplyHandler_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_messaging
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_messaging
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_messaging
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_messaging
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_messaging
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_messaging
#endif

#endif  // __messaging_hh__

